{"version":3,"sources":["assets/markdown/scss.md","assets/markdown/flex.md","assets/markdown/css-layout.md","assets/markdown/cssBem.md","assets/markdown/cssBase.md","assets/markdown/js-es6-aync.md","assets/markdown/js-issue.md","assets/markdown/js-deep-copy.md","assets/markdown/vue-vuex.md","assets/markdown/react-simple-tutorial.md","assets/images/carousel sync /^/.*$","assets/images/carousel/1.jpg","assets/images/carousel/2.jpg","assets/images/carousel/b03.jpg","components/markdown/MarkDown.js","features/blog/CssScss.js","features/blog/CssFlex.js","features/blog/CssLayout.js","features/blog/CssBem.js","features/blog/CssBase.js","features/blog/JsEs6Async.js","features/blog/JsIssue.js","features/blog/JsDeepCopy.js","features/blog/VueVuex.js","features/blog/ReactSimpleTutorial.js","features/home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","map","./1.jpg","./2.jpg","./b03.jpg","./config","./config.json","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","p","MarkDown","props","context","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","esm","className","options","forceBlock","source","Component","defaultProps","CssScss","markdown_MarkDown","scssMarkDown","CssFlex","flexMarkDown","layoutMarkDown","CssBem","bemMarkDown","CssBase","cssBaseMarkDown","JsEs6Async","jsEs6AyncMarkDown","JsIssue","jsIssueMarkDown","JsDeepCopy","jsDeepCopyMarkDown","VueVuex","vueVuexMarkDown","ReactSimpleTutorial","mdSource","Home","_this","getCarouselImages","carouselConfig","list","item","index","image","require","concat","key","src","SubMenu","Menu","Content","Layout","Sider","images","carousel","autoplay","layout","width","style","background","menu","mode","defaultSelectedKeys","defaultOpenKeys","height","title","Item","Link","to","match","path","Home_RouteView","route","RouteView","Switch","Route","component","CssLayout","App","state","loggedIn","Header","Footer","back_top","affix","offsetTop","theme","lineHeight","App_RouteView","exact","render","Redirect","withRouter","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","console","log","installing","waiting","active","onupdatefound","installingWorker","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","HashRouter","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b64e0ff9.chunk.js","sourcesContent":["module.exports = \"<p>sass让人们受益的一个重要特性就是它为css引入了变量。你可以把反复使用的css属性值 定义成变量，然后通过变量名来引用它们，而无需重复书写这一属性值。</p>\\n<h5 id=\\\"1、变量声明【使用符号】\\\">1、变量声明;【使用$符号】</h5>\\n<p>当变量定义在css规则块内，那么该变量只能在此规则块内使用。如果它们出现在任何形式的{...}块中（如@media或者@font-face块）中时，只能在块内生效。</p>\\n<pre><code>$highlight-color: #F90;  //变量名使用中划线和下划线都行\\n\\n.login-wrap {\\n  text-align: center;\\n  font-size: 30px;\\n  color:$highlight-color;\\n  border:1px solid $highlight-color\\n}</code></pre><pre><code>$highlight-color: #F90;    //可以在login-wrap外的块中使用\\n\\n.login-wrap {\\n  $width: 30px;\\n  text-align: center;\\n  font-size: $width;    //只能在login-wrap块中使用\\n  color:$highlight-color;\\n}</code></pre><h5 id=\\\"2、css嵌套\\\">2、css嵌套</h5>\\n<p>可以避免重复多次的写父选择器。将嵌套的选择器作为子选择器。</p>\\n<pre><code>.center{\\n  .title{\\n    font-size: 20px;\\n    font-weight: bold;\\n  }\\n\\n  input{\\n    background-color: gray;\\n  }\\n}\\n /* 编译后 */\\n.center .title {\\n   font-size: 20px;\\n   font-weight: bold; \\n}\\n.center input { background-color: gray;}</code></pre><p>群组的嵌套</p>\\n<pre><code>//子元素群组\\n.container {\\n  h1, h2, h3 {margin-bottom: 10px}\\n}\\n编译后\\n.container h1, .container h2, .container h3 { margin-bottom: 10px }</code></pre><pre><code>//父元素群组\\nnav, aside {\\n  a {color: blue}\\n}\\n编译后\\nnav a, aside a {color: blue}</code></pre><h5 id=\\\"3、父元素的引用\\\">3、父元素的引用</h5>\\n<p>有时并不是让嵌套的作为子原则器，而是父选择器的补充，比如:hover,，此时必须使用 父元素的引用符 &amp;, 此时&amp;代表父元素 </p>\\n<pre><code>.center{\\n  input{\\n    background-color: gray;\\n  }\\n\\n  &amp;:hover{ \\n    color:red;\\n  }\\n}\\n编译后\\n.center input{background-color: gray;}\\n.center:hover{color:red;}</code></pre><h5 id=\\\"4、子组合和同胞选择器的使用-、-和--\\\">4、子组合和同胞选择器的使用 &gt;、+ 和 ~ ;</h5>\\n<p>可以把它们放在==外层选择器<strong>后边</strong>==，或==里层选择器<strong>前边</strong>==：</p>\\n<pre><code>article {\\n  ~ article { border-top: 1px dashed #ccc }  //里层选择器前面\\n  &gt; section { background: #eee }\\n  dl &gt; {    //外层选择器前面\\n    dt { color: #333 }\\n    dd { color: #555 }\\n  }\\n  nav + &amp; { margin-top: 0 }\\n}\\n\\n//编译后\\narticle ~ article { border-top: 1px dashed #ccc }\\narticle &gt; footer { background: #eee }\\narticle dl &gt; dt { color: #333 }\\narticle dl &gt; dd { color: #555 }\\nnav + article { margin-top: 0 }</code></pre><h5 id=\\\"5、混合器\\\">5、混合器</h5>\\n<p>通过变量我们可以对单个css值，定义定义和重用，如果对多个css值，都写变量，显得太麻烦，所以使用混合器一次性定义多个。</p>\\n<p><strong>通过@mixin定义， 通过@include使用</strong></p>\\n<pre><code>@mixin rounded-corners {\\n  -moz-border-radius: 50px;\\n  -webkit-border-radius: 50px;\\n  border-radius: 50px;\\n}\\n\\n.center{\\n  input{\\n    background-color: gray;\\n    @include rounded-corners;\\n  }\\n}\\n编译后\\n.center{\\n  input{\\n    background-color: gray;\\n    -moz-border-radius: 50px;\\n    -webkit-border-radius: 50px;\\n    border-radius: 50px;\\n  }\\n}</code></pre><p>可以给混合器传参</p>\\n<pre><code>@mixin rounded-corners($normal) {\\n  -moz-border-radius: $normal;\\n  -webkit-border-radius: $normal;\\n  border-radius: $normal;\\n}\\n\\n.center{\\n  input{\\n    background-color: gray;\\n    @include rounded-corners(50%);\\n  }\\n}</code></pre><h5 id=\\\"6、继承\\\">6、继承</h5>\\n<p>变量是基于单个 css 属性的，mixin是基于多个css属性的，并且这两个都是同属一个css样式文件才生效，</p>\\n<p>而继承是基于css类的，可以在不同的css文件间使用，既可以给自身的选择器用，也可以给继承的后代选择器用</p>\\n<pre><code>//1.css\\n@mixin rounded-corners($normal) {\\n  -moz-border-radius: $normal;\\n  -webkit-border-radius: $normal;\\n  border-radius: $normal;\\n}\\n\\n.center{  //可用于class为center的元素\\n  .title{\\n    font-size: 20px;\\n    font-weight: bold;\\n  }\\n  input{\\n    background-color: gray;\\n    @include rounded-corners(50%);   //使用混合器\\n  }\\n  &amp;:hover{\\n    color:red;\\n  }\\n}</code></pre><pre><code>//2.css\\n.password {\\n  @extend .center;      //继承.center的所有样式。\\n  box-shadow: 0 0 0 10px red inset;\\n}</code></pre><p>不仅会继承.center自身的所有样式，任何跟.center有关的组合选择器样式也会被.password 以组合选择器的形式继承</p>\\n<pre><code>//不要使用后代选择器去继承\\n.password .text{   //不推荐\\n  @extend .center;\\n}</code></pre><p>extend-Only 选择器【将原来的“ . ”使用“ % ”定义，只用于继承，不会给某个元素用】</p>\\n<pre><code>%center{  //只用于@extend的使用，不会给class为center的元素用，况且此时也不是class样式了\\n  input{\\n    background-color: gray;\\n    @include rounded-corners(50%);\\n  }\\n  &amp;:hover{\\n    color:red;\\n  }\\n}\\n.password {\\n  @extend %center;\\n  box-shadow: 0 0 0 10px red inset;\\n}</code></pre>\";","module.exports = \"<h2 id=\\\"1、flex布局是什么？\\\">1、flex布局是什么？</h2>\\n<p>任何一个容器都可以指定为Flex布局。</p>\\n<p>适用场景: <strong>只要与居中相关的，水平居中，垂直居中，或者水平垂直居中，都可以使用flex布局</strong></p>\\n<pre><code>.box{\\n  display: flex;\\n}\\n//或者行内级别(其他行内元素可以直接跟在行末尾)\\n.box{\\n  display: inline-flex;\\n}</code></pre><p>此时子元素无法再使用==float==、==clear==和==vertical-align==属性,\\n<strong>但其中的子元素同样可以设置长和宽等属性</strong></p>\\n<p>==注意==:<strong>默认情况下子项目在“纵轴”方向的高度是自动伸展铺满的，除非给子项目指定具体的height值。 可通过align-items改变默认值</strong></p>\\n<h2 id=\\\"2、flex容器的属性\\\">2、flex容器的属性</h2>\\n<ul>\\n<li>flex-direction    【决定主轴的方向（即项目的排列方向）】</li>\\n<li>flex-wrap  【决定在主轴上排不下，如何换行】</li>\\n<li>justify-content  【项目在主轴上的对齐方式】</li>\\n<li>align-items  【项目在纵轴上的对齐方式】</li>\\n<li>align-content  【多根主轴时项目在纵轴的对齐方式，如果项目只有一根主轴线，该属性不起作用】</li>\\n</ul>\\n<p>其中前4种最常用。</p>\\n<h4 id=\\\"21、flex-direction属性\\\">2.1、flex-direction属性</h4>\\n<pre><code>.box {\\n  flex-direction: row | row-reverse | column | column-reverse;\\n}\\n\\n/**\\nrow（默认值）：主轴为水平方向，起点在左端。\\nrow-reverse：主轴为水平方向，起点在右端。\\ncolumn：主轴为垂直方向，起点在上沿。\\ncolumn-reverse：主轴为垂直方向，起点在下沿。\\n*/</code></pre><ul>\\n<li>如果子元素不定高，则值为row|row-reverse时，默认高度自动铺满容器。（    align-items: stretch;）</li>\\n</ul>\\n<p><img src=\\\"https://github.com/libbGit/static-file/blob/master/image/flex/flex-direction-row.png?raw=true\\\" alt=\\\"image\\\"></p>\\n<ul>\\n<li>如果子元素不定宽，则值为column|column-reverse时，默认宽度自动铺满容器。（    align-items: stretch;）</li>\\n</ul>\\n<p><img src=\\\"https://github.com/libbGit/static-file/blob/master/image/flex/flex-direction-column.png?raw=true\\\" alt=\\\"image\\\"></p>\\n<ul>\\n<li>如果子元素定宽和高，则宽/高度使用自己定义的。</li>\\n</ul>\\n<p><img src=\\\"https://github.com/libbGit/static-file/blob/master/image/flex/flex-direction-column-width.png?raw=true\\\" alt=\\\"image\\\"></p>\\n<h4 id=\\\"22、flex-wrap属性\\\">2.2、flex-wrap属性</h4>\\n<p>默认情况下，项目都排在一条主轴线上。flex-wrap属性定义，如果一条轴线排不下，如何换行。</p>\\n<pre><code>.box{\\n  flex-wrap: nowrap | wrap | wrap-reverse;\\n}\\n\\n/**\\nnowrap（默认值）：如果排列不下时，会按照子项目的实际宽度比例，等比缩小，然后排下\\n*/</code></pre><ul>\\n<li>值为wrap</li>\\n</ul>\\n<p><img src=\\\"https://github.com/libbGit/static-file/blob/master/image/flex/flex-wrap-no.png?raw=true\\\" alt=\\\"image\\\"></p>\\n<ul>\\n<li>值为nowrap</li>\\n</ul>\\n<p><img src=\\\"https://github.com/libbGit/static-file/blob/master/image/flex/flex-wrap.png?raw=true\\\" alt=\\\"image\\\"></p>\\n<h4 id=\\\"23、justify-content属性\\\">2.3、justify-content属性</h4>\\n<p>定义了项目在主轴上的对齐方式。</p>\\n<pre><code>.box {\\n  justify-content: flex-start | flex-end | center | space-between | space-around;\\n}\\n\\n/**\\nspace-between：两端对齐，项目之间的间隔都相等【即开始和尾部贴边】。\\nspace-around：每个项目两侧的间隔相等【不贴边】。\\n*/</code></pre><h4 id=\\\"24、align-items属性\\\">2.4、align-items属性</h4>\\n<p>定义项目在纵轴上如何对齐</p>\\n<pre><code>.box {\\n  align-items: flex-start | flex-end | center | baseline | stretch;\\n}\\n\\n/**\\nstretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\\nflex-start：交叉轴的起点对齐【不会占满整个宽度，而是采用实际宽度】。\\nflex-end：交叉轴的终点对齐【不会占满整个宽度，而是采用实际宽度】。\\ncenter：交叉轴的中点对齐【不会占满整个宽度，而是采用实际宽度】。\\nbaseline: 项目的第一行文字的基线对齐【不会占满整个宽度，而是采用实际宽度】。\\n*/</code></pre><h2 id=\\\"3、flex容器内部的项目的属性\\\">3、flex容器内部的项目的属性</h2>\\n<ul>\\n<li>flex  该项目在“主轴”上如何填充空白区域</li>\\n<li>align-self  允许单个项目有与其他项目不一样的“纵轴”对齐方式，可覆盖align-items属性</li>\\n</ul>\\n<h4 id=\\\"31、flex属性\\\">3.1、flex属性</h4>\\n<pre><code>.item {\\n  flex: none | auto\\n\\n}\\n\\n/**\\n建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。\\nauto: 表示将此项目伸展并占满空白区域\\nnone：不填充空白区域\\n*/</code></pre><p><img src=\\\"https://github.com/libbGit/static-file/blob/master/image/flex/flex-item-auto.png?raw=true\\\" alt=\\\"image\\\"></p>\\n<h4 id=\\\"32、align-self属性\\\">3.2、align-self属性</h4>\\n<pre><code>.item {\\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\\n}\\n\\n/**\\nauto：（默认）继承父元素的align-items属性，如果父元素没定义，则使用父元素默认的，即stretch\\n*/</code></pre><p><img src=\\\"https://github.com/libbGit/static-file/blob/master/image/flex/flex-align-self.png?raw=true\\\" alt=\\\"image\\\"></p>\\n\";","module.exports = \"<h2 id=\\\"一、居中布局\\\">一、居中布局</h2>\\n<h4 id=\\\"1、水平居中\\\">1、水平居中</h4>\\n<h6 id=\\\"a、inline-block--text-align\\\">a、inline-block + text-align</h6>\\n<pre><code>//css\\n.parent{\\n    text-align: center;\\n}\\n.child{\\n    display: inline-block;\\n}\\n\\n//html\\n&lt;div class=&quot;parent&quot;&gt;\\n    &lt;div class=&quot;child&quot;&gt;Demo&lt;/div&gt;\\n&lt;/div&gt;</code></pre><p>Tips：兼容至IE8.</p>\\n<p><img src=\\\"https://github.com/libbGit/static-file/blob/master/image/layout/horizontal-center.png?raw=true\\\" alt=\\\"image\\\"></p>\\n<h6 id=\\\"b、table--margin\\\">b、table + margin</h6>\\n<pre><code>//css\\n.child{\\n    display: table;\\n    margin: 0 auto;\\n}\\n\\n//html\\n&lt;div&gt;\\n    &lt;div class=&quot;child&quot;&gt;Demo&lt;/div&gt;\\n&lt;/div&gt;</code></pre><p>Tips：兼容至IE8.</p>\\n<p><img src=\\\"https://github.com/libbGit/static-file/blob/master/image/layout/horizontal-center.png?raw=true\\\" alt=\\\"image\\\"></p>\\n<h6 id=\\\"c、absolute--transform\\\">c、absolute + transform</h6>\\n<pre><code>//css\\n.parent{\\n    position: relative;\\n    height: 30px;\\n    width:200px;\\n}\\n.child{\\n    position: absolute;\\n    left:50%;\\n    transform: translateX(-50%);\\n}\\n\\n//html\\n&lt;div class=&quot;parent&quot;&gt;\\n    &lt;div class=&quot;child&quot;&gt;Demo&lt;/div&gt;\\n&lt;/div&gt;</code></pre><p>Tips：可兼容至IE9，因为transform限制。</p>\\n<p><img src=\\\"https://github.com/libbGit/static-file/blob/master/image/layout/horizontal-center.png?raw=true\\\" alt=\\\"image\\\"></p>\\n<h6 id=\\\"d、flex----justify-content\\\">d、flex  +  justify-content</h6>\\n<pre><code>//css\\n.parent{\\n    display: flex;\\n    justify-content: center;\\n}\\n\\n//html\\n&lt;div class=&quot;parent&quot;&gt;\\n    &lt;div&gt;Demo&lt;/div&gt;\\n&lt;/div&gt;</code></pre><p>Tips：可兼容至IE10，但flex提供的布局很强大。</p>\\n<p><img src=\\\"https://github.com/libbGit/static-file/blob/master/image/layout/horizontal-center.png?raw=true\\\" alt=\\\"image\\\"></p>\\n<h4 id=\\\"2、垂直居中\\\">2、垂直居中</h4>\\n<h6 id=\\\"a、tablet-cell--vertical-align\\\">a、tablet-cell + vertical-align</h6>\\n<pre><code>//css\\n.child{\\n    display: table-cell;\\n    vertical-align: middle;\\n    height: 100px;\\n}\\n\\n//html\\n&lt;div&gt;\\n    &lt;div class=&quot;child&quot;&gt;Demo&lt;/div&gt;\\n&lt;/div&gt;</code></pre><p><img src=\\\"https://github.com/libbGit/static-file/blob/master/image/layout/vertical-middle.png?raw=true\\\" alt=\\\"image\\\"></p>\\n<h6 id=\\\"b、absolute--transform\\\">b、absolute + transform</h6>\\n<pre><code>//css\\n.parent{\\n    position: relative;\\n\\n    width: 80px;\\n    height: 120px;\\n}\\n.child{\\n    position: absolute;\\n    top: 50%;\\n    transform:translateY(-50%);\\n}\\n\\n\\n//html\\n&lt;div class=&quot;parent&quot;&gt;\\n    &lt;div class=&quot;child&quot;&gt;Demo&lt;/div&gt;\\n&lt;/div&gt;</code></pre><p><img src=\\\"https://github.com/libbGit/static-file/blob/master/image/layout/vertical-middle.png?raw=true\\\" alt=\\\"image\\\"></p>\\n<h6 id=\\\"c、flex--align-items\\\">c、flex + align-items</h6>\\n<pre><code>//css\\n.parent{\\n    display: flex;\\n    align-items: center;\\n\\n    width: 80px;\\n    height: 120px;\\n}\\n\\n//html\\n&lt;div class=&quot;parent&quot;&gt;\\n    &lt;div&gt;Demo&lt;/div&gt;\\n&lt;/div&gt;</code></pre><p><img src=\\\"https://github.com/libbGit/static-file/blob/master/image/layout/vertical-middle.png?raw=true\\\" alt=\\\"image\\\"></p>\\n<h4 id=\\\"3、水平垂直居中\\\">3、水平垂直居中</h4>\\n<h6 id=\\\"a、absolute--transform\\\">a、absolute + transform</h6>\\n<pre><code>//css\\n.parent{\\n    position: relative;\\n\\n    width: 120px;\\n    height: 80px;\\n}\\n.child{\\n    position: absolute;\\n    left: 50%;\\n    top: 50%;\\n    transform: translate(-50%,-50%);\\n}\\n\\n//html\\n&lt;div class=&quot;parent&quot;&gt;\\n    &lt;div class=&quot;child&quot;&gt;Demo&lt;/div&gt;\\n&lt;/div&gt;</code></pre><p><img src=\\\"https://github.com/libbGit/static-file/blob/master/image/layout/center.png?raw=true\\\" alt=\\\"image\\\"></p>\\n<h6 id=\\\"b、flex\\\">b、flex</h6>\\n<p>方案1</p>\\n<pre><code>//css\\n.parent{\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n\\n    width: 120px;\\n    height: 80px;\\n}\\n\\n//html\\n&lt;div class=&quot;parent&quot;&gt;\\n    &lt;div&gt;Demo&lt;/div&gt;\\n&lt;/div&gt;</code></pre><p>方案2</p>\\n<pre><code>.parent{\\n    display: flex;\\n    height: 300px;\\n    width: 200px;\\n}\\n.child {\\n    margin: auto; \\n}\\n\\n//html\\n&lt;div class=&quot;parent&quot;&gt;\\n    &lt;div class=&quot;child&quot;&gt;Demo&lt;/div&gt;\\n&lt;/div&gt;</code></pre><p><img src=\\\"https://github.com/libbGit/static-file/blob/master/image/layout/center.png?raw=true\\\" alt=\\\"image\\\"></p>\\n<h2 id=\\\"二、多列布局\\\">二、多列布局</h2>\\n<p>一列定宽，一列自适应</p>\\n<pre><code>//css\\n.container{\\n   display: flex;\\n}\\n.left{\\n    width: 100px;\\n    margin-right: 20px;\\n}\\n.right{\\n    flex: 1;\\n}\\n\\n//html\\n&lt;div class=&quot;container&quot;&gt;\\n    &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt;\\n    &lt;div class=&quot;right&quot;&gt;\\n        &lt;div&gt;right1&lt;/div&gt;\\n        &lt;div&gt;right2&lt;/div&gt;\\n    &lt;/div&gt;\\n&lt;/div&gt;</code></pre><p><img src=\\\"https://github.com/libbGit/static-file/blob/master/image/layout/muti-column.png?raw=true\\\" alt=\\\"image\\\"></p>\\n<h2 id=\\\"三、等分布局\\\">三、等分布局</h2>\\n<pre><code>//css\\n.parent {\\n    display: flex;\\n}\\n\\n.column {\\n    flex: 1;\\n}\\n\\n//html\\n&lt;div class=&quot;parent&quot;&gt;\\n    &lt;div class=&quot;column&quot;&gt;column 1&lt;/div&gt;\\n    &lt;div class=&quot;column&quot;&gt;column 2&lt;/div&gt;\\n    &lt;div class=&quot;column&quot;&gt;column 3&lt;/div&gt;\\n    &lt;div class=&quot;column&quot;&gt;column 4&lt;/div&gt;\\n&lt;/div&gt;</code></pre><p><img src=\\\"https://github.com/libbGit/static-file/blob/master/image/layout/same-column.png?raw=true\\\" alt=\\\"image\\\"></p>\\n\";","module.exports = \"<p>BEM的意思就是块（block）、元素（element）、修饰符（modifier）</p>\\n<p>## </p>\\n<p>命名约定的模式如下：</p>\\n<pre><code>.block{}  \\n.block__element{}  \\n.block--modifier{}  </code></pre><ul>\\n<li>.block 代表了更高级别的抽象或组件。</li>\\n<li>.block__element 代表.block的后代，用于形成一个完整的.block的整体。</li>\\n<li>.block--modifier代表.block的不同状态或不同版本,是改变某个块的外观(颜色，背景，边框，阴影等)的标志。</li>\\n</ul>\\n<pre><code>block的类型例如   header, container, menu, checkbox, input\\nelement的类型例如  menu item, list item, checkbox caption, header title\\nmodifier的类型例如  disabled, highlighted, checked, fixed, size big, color yellow</code></pre><p>之所以使用两个连字符和下划线而不是一个，是为了在给block或者element起名时，可以在中间加入-或者_,如:</p>\\n<pre><code>.site-search{} /* 块 */  \\n.site-search__field{} /* 元素 */  \\n.site-search--full{} /* 修饰符 */    \\n.el-button--primary{}  </code></pre><p>BEM的关键是光凭名字就可以告诉其他开发者某个标记是用来干什么的。</p>\\n<p>下面是个常规的class使用:</p>\\n<pre><code>&lt;form class=&quot;form&quot;&gt;  \\n  &lt;div class=&quot;register&quot;&gt;\\n      &lt;input type=&quot;text&quot;&gt;  \\n  &lt;/div&gt;\\n  &lt;input type=&quot;Submit&quot; value =&quot;Search&quot; class=&quot;button&quot;&gt;  \\n&lt;/form&gt;   </code></pre><pre><code>.form{\\n    width:200px;\\n    padding:2px;\\n}\\n.form .register{\\n    width:50px;\\n    padding:2px;\\n\\n}\\n.form .button{\\n    width:50px;\\n    padding:2px;\\n    background-color:blue;\\n}</code></pre><p>如果改造成BEM，则变成下面:</p>\\n<pre><code>&lt;form class=&quot;form&quot;&gt;  \\n  &lt;div class=&quot;form__register&quot;&gt;\\n      &lt;input type=&quot;text&quot;&gt;  \\n  &lt;/div&gt;\\n  &lt;input type=&quot;Submit&quot; value =&quot;Search&quot; class=&quot;button button--primary&quot;&gt;\\n&lt;/form&gt;   </code></pre><p>对应的css</p>\\n<pre><code>.form{\\n    width:200px;\\n    padding:2px;\\n}\\n.form__register{   //register作为独立的form后代的block块\\n    width:50px;\\n    padding:2px;\\n}\\n.button{        //button只是个独立的样式，并不属于form自身。所以没必要用form__buttom\\n    width:50px;\\n    padding:2px;\\n}\\n.button--primary{\\n    background-color:blue;\\n}\\n</code></pre><p>我们同样可以看到下面的代码， person是个高级别的组件，而手是人的一部分，所属于人，单独的手是不存在的，所以person__hand， 而人有男有女，用来修饰人，person--female， 同样，男人有手，女人也有，person--female__hand，手是男人或者女人的一部分。\\n最后，一个人的手有左右之分，person__hand--left，用left修饰person__hand。\\n而人的手里拿着苹果apple，这个苹果不是人的一部分，放在任何位置都是个苹果。\\n所以独立使用apple，而不用person__apple写法。</p>\\n<pre><code>.person{}  \\n.person__hand{}  \\n.person--female{}  \\n.person--female__hand{}  \\n.person__hand--left{}\\n\\n.apple{\\n\\n}</code></pre>\";","module.exports = \"<h3 id=\\\"1、定位\\\">1、定位</h3>\\n<ul>\\n<li>static     默认定位，属性top，left，z-index等无效</li>\\n<li>absolute   绝对定位，脱离常规流，后面的元素跟上来。top、left参考离此元素最近的具有absolute、relative或fixed定位的父类，如果父类都没有定位，则参考body</li>\\n<li>fixed          固定定位，脱离常规流，后面的元素跟上来。top、left参考body，并且固定在屏幕，不随滚动条的滚动而上下移动。</li>\\n<li>relative   相对定位，不脱离常规流。top、left参考本元素。</li>\\n</ul>\\n<p>z-index适用于已经定位的元素。</p>\\n<p>堆叠顺序如下（从下到上）</p>\\n<ul>\\n<li>1、根元素（即HTML元素）的background和borders</li>\\n<li>2、正常流中非定位后代元素（这些元素顺序按照HTML文档出现顺序）</li>\\n<li>3、浮动元素(浮动元素之间是不会出现z-index重叠的)</li>\\n<li>4、已定位后代元素（这些元素顺序按照HTML文档出现顺序）</li>\\n</ul>\\n<p><strong>使用 z-index后，4种已定位元素不会按照html文档顺序堆叠，而会按照堆叠上下文堆叠；在每个独立的堆叠上下文中，元素可以自定义子元素自身的堆叠上下文，但子元素堆叠顺序不能超出父元素堆叠上下文。剩下的其他非定位还是按照原来的方式。</strong>\\n<img src=\\\"https://github.com/libbGit/static-file/blob/master/image/position-context.png?raw=true\\\" alt=\\\"image\\\"></p>\\n<p>产生堆叠上下文的几种情形:</p>\\n<ul>\\n<li>1、根元素（即HTML元素）</li>\\n<li>2、已定位元素，并且z-index不是默认的auto。</li>\\n<li>3、元素transform不为none</li>\\n<li>4、元素filter属性不为none</li>\\n</ul>\\n<h3 id=\\\"2、浮动\\\">2、浮动</h3>\\n<p>当一个div中的两个元素浮动之后，此时父元素div的高度就会塌陷，此时div的高度为0。</p>\\n<p>清除浮动的方式:</p>\\n<ul>\\n<li>1、浮动元素最后的兄弟元素添加clear:both;</li>\\n<li>2、浮动元素的容器(父元素)添加overflow:hidden;或overflow:auto;</li>\\n<li>3、浮动元素的容器(父元素)添加伪元素:after清除浮动（推荐）<pre><code>.clearfix:after{\\ncontent: &quot;&quot;; \\ndisplay: block; \\nheight: 0; \\nclear: both; \\nvisibility: hidden;  \\n}</code></pre></li>\\n</ul>\\n<h3 id=\\\"3、块级元素和行内元素\\\">3、块级元素和行内元素</h3>\\n<ul>\\n<li>1、块级元素独自占一行且宽度会占满父元素宽度。行内元素不会独占一行，相邻行内元素可以排在同一行；</li>\\n<li>2、块级元素可以设置weith和height。行内元素设置width和height无效；</li>\\n<li>3、块级元素可以设置margin和padding属性，而行内元素水平方向的margin和padding如margin-left、padding-right可以产生边距效果，但是竖直方向的如padding-top和margin-bottom不会产生边距效果。</li>\\n</ul>\\n<p><strong>注意:</strong></p>\\n<p>1、margin 和 padding 的百分比值是以父元素的宽度作为参考基准的, \\n    即使对于margin-top 和margin-bottom，padding-top和padding-bottom 来说也是这样。</p>\\n<p>2、而position中的top、left是按照父元素的高和宽定义的。</p>\\n<p>body的宽度默认为视口宽度，即100vw，而body高度默认为0(可以设置为100vh)，随着子元素的高度而自适应。</p>\\n<h3 id=\\\"4、css优先级\\\">4、css优先级</h3>\\n<pre><code>!important &gt; style &gt; id &gt; class &gt; tag\\n\\n例如:\\ndiv{} //权重为1\\n.class1{}  //权重10\\n#d1{}  //  权重100\\n行内   //  权重 1000\\n!important  //权重正无穷\\n\\n#d1 div{}  //100+1=101</code></pre><p>在html的元素上的css谁的权重大，则使用谁的样式；如果权重相同，则使用最后定义的。\\n<img src=\\\"https://github.com/libbGit/static-file/blob/master/image/css-important.png?raw=true\\\" alt=\\\"image\\\"></p>\\n<h3 id=\\\"5、清除行内元素之间的空白\\\">5、清除行内元素之间的空白</h3>\\n<p>inline-block的元素之间会受空白区域的影响，元素之间差不多会有一个字符的间隙。如果在同一行内有4个25%相同宽度的元素，会导致最后一个元素掉下来。</p>\\n<p>解决方案:</p>\\n<ul>\\n<li>1、使用浮动float</li>\\n<li>2、设置父元素的font-size属性为0，然后对子元素重新设定font-size (推荐)</li>\\n</ul>\\n<h3 id=\\\"6、pointer-events的使用\\\">6、pointer-events的使用</h3>\\n<pre><code>.disabled{\\n  pointer-events: none;\\n}\\n</code></pre><p>利用该属性，可以做如下的事情:</p>\\n<ul>\\n<li>阻止该元素上任何点击事件的执行</li>\\n<li>使该元素上链接显示为默认光标</li>\\n<li>阻止该元素触发hover和active状态</li>\\n</ul>\\n<p>在定位的多图层间避免触发其他事件有很好的效果。</p>\\n<h3 id=\\\"7、响应式设计：\\\">7、响应式设计：</h3>\\n<ul>\\n<li>1、使用百分比长度来取代固定长度。如果实在做不到这一点，也应该尝试使用与视口相关的单位（vw、vh、vmin 和vmax）或者calc(100% - 30px)得出的值，\\n它们的值解析为视口宽度或高度的百分比。</li>\\n<li>2、 当你需要在较大分辨率下得到固定宽度时，使用 max-width 而不是width，因为它可以适应较小的分辨率，而无需使用媒体查询</li>\\n<li>3、 不要忘记为替换元素（比如 img、object、video、iframe 等）设置一个max-width，值为100%。防止撑破容器。</li>\\n</ul>\\n<p>轻易不要用媒体查询，媒体查询使用于在特定的窗口下，单一元素的位置和大小发生了与布局相关的形变。比如竖的变为横的。圆的变为方的，上一行的掉到了第二行等。</p>\\n<p><strong>总的来说，我们的思路是尽最大努力实现==弹性可伸缩的布局==，并在与布局形变有关的特定屏幕尺寸下使用媒体查询</strong></p>\\n<h3 id=\\\"9、css中的内置变量和函数：\\\">9、css中的内置变量和函数：</h3>\\n<ul>\\n<li>currentColor  当前的标签所继承的==文字颜色==</li>\\n<li>inherit  防止浏览器使用默认的样式，而显式的定义为父元素的样式。</li>\\n<li>initial  初始化为浏览器默认的样式</li>\\n</ul>\\n<p>attr()</p>\\n<pre><code>&lt;span data-text=&quot;123456789&quot;&gt;&lt;/span&gt;\\nspan:before{\\n   content: attr(data-text);  //将span的data-text属性的值设置到content上\\n}</code></pre><p>url()</p>\\n<pre><code>background-image: url(&quot;logo.png&quot;);</code></pre><p>calc()</p>\\n<pre><code>width: calc(100% - 29px); //减号前后，必须留一个空格\\nwidth: calc(100vw - 29px);</code></pre><h3 id=\\\"10、boder，-box-shadow，outline\\\">10、boder， box-shadow，outline</h3>\\n<p>这三个中只有boder影响布局，其他都不会影响布局。</p>\\n<h3 id=\\\"11、css中的百分比值\\\">11、css中的百分比值</h3>\\n<p>margin-top, margin-bottom和margin-right, margin-left一样，它的百分值 参考的是父元素的 宽度(不是高度)</p>\\n<p>padding-top, padding-bottom和padding-right, padding-left一样，它的百分值 参考的是父元素的 宽度(不是高度)</p>\\n<p>而 position中 top和bottom 它的百分值 参考的是父元素的 高度 left和right 它的百分值 参考的是父元素的 宽度</p>\\n<p>元素按照display， position，float的顺序渲染， 如果dispaly为none，则position和float都不执行，否则开始执行position； 如果position的值为absolute或者fixed，那么float则不执行，元素的位置由top，right等决定。 如果position为其他值，则开始执行float</p>\\n<p>line-height的百分值 参考的是自身元素的font-size大小。</p>\\n<p>background-position的以左上角为基准点 0% 0%</p>\\n\";","module.exports = \"<h2 id=\\\"es6之asyncawait\\\">ES6之async/await</h2>\\n<p>如果要使一个函数变成async/await的形式，必须要做两步:</p>\\n<blockquote>\\n<p>1、直接在普通函数前面加上async，表示这是一个异步函数\\n(任何普通函数可以调用async函数, 结果.then)</p>\\n<p>2、在函数内部 的异步执行的语句前面加上await\\n(后面可以跟promise或者任意类型的值)</p>\\n</blockquote>\\n<h5 id=\\\"1、async的多种声明形式\\\">1、async的多种声明形式</h5>\\n<pre><code>//函数式声明\\nasync function test() {}</code></pre><pre><code>//对象式声明\\nlet obj = {\\n   async test() {}\\n};</code></pre><pre><code>//箭头函数声明\\nlet test = async () =&gt; { }</code></pre><h5 id=\\\"2、await语句的多种调用形式\\\">2、await语句的多种调用形式</h5>\\n<pre><code>//普通语句，首先await a;的表达式的值为a的值，然后再转成一个resolve的promise对象\\nasync function f() {\\n    await 123;   //值为123\\n    let a = await &quot;hello&quot;;  //a的值为“hello”\\n    return a;\\n}</code></pre><pre><code>//promise语句。(1)如果是resolve的。则直接返回resolve中的数据\\ngetPromise() {\\n  return new Promise((resolve, reject) =&gt; {\\n    resolve(&quot;world&quot;);\\n  });\\n}\\nasync getName() {\\n  let p = await this.getPromise();  //p为resolve的promise对象，值为“world”\\n  return p;\\n},</code></pre><pre><code>//promise语句。(2)如果是reject的。则直接返回reject中的数据\\ngetPromise() {\\n  return new Promise((resolve, reject) =&gt; {\\n    reject(new Error(&quot;错误了&quot;));\\n  });\\n}\\nasync getName() {\\n  let p = await this.getPromise();  //p为reject的promise对象，值为“错误了”,后面的语句不会再执行\\n  //to do \\n  return p;\\n},\\n此时要么在async部分捕获错误，并进行处理。要么在调用async语句的地方捕获错误并处理</code></pre><h5 id=\\\"3、await语错误处理\\\">3、await语错误处理</h5>\\n<pre><code>//单条语句的处理\\nasync getName() {\\n  let str = &quot;&quot;;\\n  await this.getPromise().catch(err =&gt; {\\n    str = &quot;world&quot;;\\n  });\\n  return str;\\n}</code></pre><pre><code>//多条语句的处理\\nasync getName() {\\n  let str = &quot;&quot;;\\n  try {\\n    await this.getPromise();\\n    await 123;\\n  } catch (err) {\\n    str = &quot;world1&quot;;\\n  }\\n    return str;\\n}</code></pre><h5 id=\\\"4、await的并行处理\\\">4、await的并行处理</h5>\\n<pre><code>//因为多个await都是依次往后台发送。如果这几个请求之前没有先后关联顺序，则完全没必要。可以做成并行发送\\nasync getName() {\\n  let str = &quot;&quot;;\\n  await Promise.all([this.getPromise(),this.getPromise(),this.getPromise()]);\\n  return str;\\n},</code></pre>\";","module.exports = \"<h3 id=\\\"1、css选择符不能以数字开头\\\">1、css选择符不能以数字开头</h3>\\n<p>[data-date$===20180416==]</p>\\n<pre><code>&lt;div data-date=&quot;20180416&quot;&gt;第一个 div 元素。&lt;/div&gt;\\n\\n[data-date$=20180416]\\n{\\n   background:red;\\n}</code></pre><p>这种出错，\\ndiv元素处的20180416为一个变量。而变量不能以数字开头。虽然可以以\\n$开头，但此处的$符已被占用为判断属性结束的标志。所以需要转义下</p>\\n<pre><code>&lt;div data-date=&quot;$20180416&quot;&gt;第一个 div 元素。&lt;/div&gt;\\n\\n[data-date$=\\\\$20180416]\\n{\\n   background:red;\\n}</code></pre><p>这样就ok了。</p>\\n<h3 id=\\\"2、tofixed不能用作四舍五入\\\">2、toFixed()不能用作四舍五入</h3>\\n<pre><code>(1.115).toFixed(2)   // &quot;1.11&quot;\\n(1.125).toFixed(2)    //&quot;1.13&quot;</code></pre><p>它既不是四舍五入，也不是五舍六入，而是啥都不是。非常不稳定。无法预测。</p>\\n<p>可以用Math.round()或者math.js库。</p>\\n<h3 id=\\\"3、form表单的四种编码方式\\\">3、form表单的四种编码方式</h3>\\n<ul>\\n<li>使用POST方式发送请求，并且enctype=&quot;application/x-www-form-urlencoded&quot;(默认方式)</li>\\n<li>使用POST方式发送请求，并且enctype=&quot;text/plain&quot;</li>\\n<li>使用POST方式发送请求，并且enctype=&quot;multipart/form-data&quot;(二进制上传必须使用此方法)</li>\\n<li>使用GET方式发送请求，自动忽略enctype属性</li>\\n</ul>\\n<pre><code>// 第一种=========================================================\\nContent-Type: application/x-www-form-urlencoded\\nfoo=bar&amp;baz=The+first+line.%0D%0AThe+second+line.%0D%0A\\n\\n// 第二种=========================================================\\nContent-Type: text/plain\\n\\nfoo=bar\\nbaz=The first line.\\nThe second line.\\n\\n// 第三种=========================================================\\nContent-Type: multipart/form-data; boundary=---------------------------314911788813839\\n\\n-----------------------------314911788813839\\nContent-Disposition: form-data; name=&quot;foo&quot;\\n\\nbar\\n-----------------------------314911788813839\\nContent-Disposition: form-data; name=&quot;baz&quot;\\n\\nThe first line.\\nThe second line.\\n\\n-----------------------------314911788813839--\\n\\n// 第四种=========================================================\\n?foo=bar&amp;baz=The%20first%20line.%0AThe%20second%20line.</code></pre><h3 id=\\\"4、文件上传的3种原生方式\\\">4、文件上传的3种原生方式</h3>\\n<ul>\\n<li>post方式，form表单enctype=&quot;multipart/form-data&quot;，通过submit发送数据</li>\\n<li>使用FormData对象，通过XMLHttpRequest发送数据</li>\\n<li>使用FileReader，通过XMLHttpRequest发送数据或其他</li>\\n</ul>\\n<pre><code>//原生js上传文件\\nvar formData = new FormData();\\n\\nformData.append(&quot;username&quot;, &quot;Groucho&quot;);\\n\\n//fileInputElement为文件上传元素\\nformData.append(&quot;userfile&quot;, fileInputElement.files[0]);\\n\\n// JavaScript file-like 对象\\nvar content = &#39;&lt;a id=&quot;a&quot;&gt;&lt;b id=&quot;b&quot;&gt;hey!&lt;/b&gt;&lt;/a&gt;&#39;; // 新文件的正文...\\nvar blob = new Blob([content], { type: &quot;text/xml&quot;});\\n\\nformData.append(&quot;webmasterfile&quot;, blob);\\n\\n\\nvar request = new XMLHttpRequest();\\nrequest.open(&quot;POST&quot;, &quot;http://foo.com/submitform.php&quot;);\\nrequest.send(formData);\\n\\nrequest.addEventListener(&quot;load&quot;, function(e){\\n    //callback\\n    var response = JSON.parse(e.target.responseText);\\n    if (response &amp;&amp; response.ret == 0) {\\n        //success\\n    } else {\\n        //fail\\n    }\\n}, false);\\n\\n/**\\n注意:只有在使用XMLHttpRequest方式时采用FormData或FileReader上传文件。\\n    使用ajax时可以不使用，因为可以使用序列化\\n*/</code></pre><h3 id=\\\"5、动态设置属性名称\\\">5、动态设置属性名称</h3>\\n<p>如果想让属性名通过字符串拼接，然后访问，则使用[],而不是点，因为点无法拼接。</p>\\n<pre><code>var name = &quot;test_&quot;+1;   //生成函数名\\nvar name = &quot;test_&quot;+2;   //生成函数名\\nwindow[name] = 100;  //name会被替换为真实的值 等于window[&quot;test_1&quot;] 等于 window.test_1\\n\\n//window.name 则不会转换name的值，会认为name就是属性名称</code></pre><h3 id=\\\"5、在inputtypefile中对同一个文件，无法重复上传的问题\\\">5、在input[type=file]中对同一个文件，无法重复上传的问题</h3>\\n<p>this.$refs.uploadRef.value = null; </p>\\n\";","module.exports = \"<h2 id=\\\"前言\\\">前言</h2>\\n<p>对于 <em>数字</em>，<em>boolean</em> 和 <em>字符串</em> 等基本类型 而言，赋值、浅拷贝和深拷贝无意义，因为每次都会在堆中开辟一块新的空间，指向新的地址。</p>\\n<h2 id=\\\"一、赋值\\\">一、赋值:</h2>\\n<p>指向同一个地址，不拷贝。\\n<img src=\\\"https://image-static.segmentfault.com/266/319/2663191658-5be8fe6ddb083_articlex\\\" alt=\\\"image\\\"></p>\\n<pre><code>var obj1 = {name:&#39;圆&#39;, radius:10, point:{x:0,y:0}};\\nvar obj2 = obj1;\\n\\nobj2.name = &quot;圆2&quot;;  //obj1中的name也会变</code></pre><h2 id=\\\"二、浅拷贝\\\">二、浅拷贝:</h2>\\n<p><img src=\\\"https://image-static.segmentfault.com/413/426/413426385-5be8fec3bc9e4_articlex\\\" alt=\\\"image\\\"></p>\\n<pre><code>var obj1 = {name:&#39;圆&#39;, radius:10, point:{x:0,y:0}};\\nvar obj2 = Object.assign({},obj1);\\n\\nobj2.name=&quot;圆2&quot;  // obj1.name不会变\\nobj2.point.x = 2       //obj1.point.x 改变，因为只拷贝到point一层\\n\\n同样，解构赋值也是如此\\nvar obj1 = {name:&#39;圆&#39;, radius:10, point:{x:0,y:0}};\\nvar obj2 = {…obj1}</code></pre><h2 id=\\\"三、深拷贝\\\">三、深拷贝:</h2>\\n<p><img src=\\\"https://image-static.segmentfault.com/410/881/4108810455-5be8ff385c57d_articlex\\\" alt=\\\"image\\\"></p>\\n<h4 id=\\\"方法1\\\">方法1</h4>\\n<blockquote>\\n<p>JSON.stringify(obj)  先将对象转换为字符串\\nJSON.parse(str)      然后再将字符串转为对象。</p>\\n</blockquote>\\n<pre><code>var obj1 = {name:&#39;圆&#39;, radius:10, point:{x:0,y:0}};\\nvar obj2 = JSON.stringify(obj1 );\\nvar obj2 = JSON.parse(obj2);\\n\\nobj2.name = &quot;圆2&quot;;  // obj1 不变\\nobj2.point.x = 3;     //  obj1 不变</code></pre><p>但JSON.stringify在转换<strong>Date，RegExp对象及function</strong>时会出现问题，同时也会<strong>忽略undefined、function</strong>。</p>\\n<pre><code>//date 类型\\nvar o = new Date();\\nconsole.log(o.toString());         //  Mon Nov 06 2017 11:23:35 GMT+0800 (China Standard Time)  本地标准时间\\nconsole.log(JSON.stringify(o));    // &quot;2017-11-06T03:23:35.547Z&quot;  国际标准时间</code></pre><p>因为stringify默认调用的是Object的toJSON方法，所以重写Date的toJSON，然后stringify就是ok的。</p>\\n<pre><code>Date.prototype.toJSON = function () {\\n  return this.toLocaleString();\\n}\\nconsole.log(JSON.stringify(o));      // &quot;11/6/2017, 11:23:35 AM&quot;</code></pre><p>同理RegExp</p>\\n<pre><code>//RegExp类型\\nr1 = /\\\\d+/;\\nconsole.log(JSON.stringify(r1));           //   {}\\n\\nRegExp.prototype.toJSON = function(){\\nreturn this.toString();\\n}\\nconsole.log(JSON.stringify(r1));          //    &quot;/\\\\\\\\d+/&quot; </code></pre><h4 id=\\\"方法2\\\">方法2</h4>\\n<blockquote>\\n<p>类库的方式。jquery,lodash等库</p>\\n</blockquote>\\n<pre><code>//jquery\\nlet  y = $.extend(true,{},x)   //第一个参数 必须为true\\n\\n//lodash库\\nlet  y = _.cloneDeep(x);</code></pre>\";","module.exports = \"<pre><code>const state = {\\n  token: 0,\\n  username: &quot;&quot;,\\n};</code></pre><pre><code>const getters = {\\n  isLogin: (state, getter, rootState, rootGetter) =&gt; {  \\n    //其中rootState, rootGetter可以访问命名空间之外的全局变量，顺序不能变。\\n    return state.token == &quot;1&quot;;\\n  },\\n};</code></pre><pre><code>const mutations = {\\n  UPDATE_TOKEN(state, payload) {\\n    state.token = payload;\\n  }\\n};</code></pre><pre><code>const actions = {\\n  update_warn_num(store,payload) {\\n    let {commit,dispatch,getters,rootGetters,rootState,state} = store; //通过解构获得，顺序无所谓，但名字不能变.\\n    commit(“UPDATE_TOKEN”, { a: 10 });                      //访问本模块的mutation, { a: 10 }为payload\\n    commit(“home/UPDATE_TEST”, { a: 10 }, { root: true });          //访问全局的mutation，home/UPDATE_TEST为home模块中的UPDATE_TEST mutation，  { a: 10 }为payload\\n    dispatch(“update_warn_num”,{ a: 10 });                  //访问本模块的action， { a: 10 }为payload\\n    dispatch(“home/update_test”, { a: 10 }, {root: true});          //访问全局的action，home/update_test为home模块中的update_test action， { a: 10 }为payload\\n  }\\n};</code></pre><pre><code>export default {\\n  namespaced: true,\\n  state,\\n  getters,\\n  mutations,\\n  actions\\n};</code></pre><p>在项目中有时就会用到在一个命名模块中 访问/调用 另一个模块的state，mutation，action等，所以把使用的普遍方法总结下来，以供需要者参考。</p>\\n\";","module.exports = \"<h3 id=\\\"一、项目创建\\\">一、项目创建</h3>\\n<pre><code>&gt; npm install create-react-app -g\\n&gt; create-react-app react-app</code></pre><h3 id=\\\"二、基础\\\">二、基础</h3>\\n<blockquote>\\n<p>react的组件实例(this)有几下几个属性context，props，refs，state：</p>\\n<blockquote>\\n<p>state  用来存放本地的变量， 通过setState改变值</p>\\n</blockquote>\\n<blockquote>\\n<p>props  用来获取父组件传入的值，不可改变。可以接受任意元素，包括基本数据类型、React元素(slot)或函数(包括事件函数)。</p>\\n</blockquote>\\n<blockquote>\\n<p>refs  获取已渲染的dom元素节点，还可以操作元素  this.refs.inputRef.focus(); 但不能在无状态组件(只接受props，返回element)上使用，因为它们没有渲染的dom实例</p>\\n</blockquote>\\n</blockquote>\\n<p>在react中对变量设置值和获取值都是采用==单花括号&quot;{}&quot;==</p>\\n<p>当元素类型以小写字母开头时，它表示一个内置的组件，如 <div> 或 <span>，并将字符串 ‘div’ 或 ‘span’ 传 递给 React.createElement。 以大写字母开头的类型，如 “<Foo />” 编译为 React.createElement(Foo)，并它正对应于你在 JavaScript 文件中定义或导入的组件。\\n我们建议用大写开头命名组件</p>\\n<p>==切记，react中组件最好使用<strong>大写开头，中间驼峰</strong>方式命名。否则如果小写，会认为是html标准的组件，而不去解析render。导致内容无法渲染出来==</p>\\n<h4 id=\\\"1、state\\\">1、state</h4>\\n<ul>\\n<li>总是使用setState更新state，不能直接修改state</li>\\n<li>setState异步的，可以设置回调，在异步处理完值后，进行其他处理。</li>\\n</ul>\\n<pre><code>this.setState({ name: &quot;i see&quot; });\\n// 等价于下面这种\\n\\n// this.setState((prevState, props) =&gt; ({\\n//   name: &#39;i see&quot;\\n//}))\\n\\n//如果在setState处理完成后，再进行其他操作。则设置回调\\n// this.setState((prevState, props) =&gt; ({\\n//     name: &quot;i see&quot;\\n// }),\\n// ()=&gt;{\\n//     //异步执行完 成后的回调     \\n// });\\n</code></pre><p>setState更新的只是 this.state的值，不是其他的值。</p>\\n<h4 id=\\\"2、props\\\">2、props</h4>\\n<p>组件的属性可以接受任意元素，包括基本数据类型(props)、React元素(slot)或函数(包括事件函数)。</p>\\n<p>props主要来源2处: 父组件传值和通过connect绑定的state和reducer</p>\\n<pre><code>&lt;Home author=&quot;libingbing&quot;&gt;内容不错呀&lt;/Home&gt;\\n&lt;!--author值，在子组件通过this.props.author获取--&gt;\\n\\n&lt;Home author=&quot;libingbing&quot;&gt;&lt;span&gt;子元素&lt;/span&gt;&lt;/Home&gt;\\n&lt;!--span元素，在子组件通过this.props.children获取--&gt;\\n\\n&lt;TestProp options={&lt;span&gt;我是个react节点&lt;/span&gt;}/&gt;\\n&lt;!-- 在子元素中直接this.props.options， 并通过{this.props.options}放入jsx中 --&gt;\\n\\n&lt;Home author=&quot;libingbing&quot; onClickChange={this.handleClickChange}&gt;&lt;/Home&gt;\\n&lt;!--在子组件中this.props.onClickChange(2)， 则父组件的handleClickChange方法会得到响应--&gt;</code></pre><pre><code>&lt;Select defaultValue=&quot;lucy&quot; style={{ width: 120 }}/&gt;\\n\\n//如果赋值的是个变量，则只需提供{}即可\\nlet name = &quot;lucy&quot;;\\n&lt;Select defaultValue={name} style={{ width: 120 }}/&gt;\\n//除了字符串之外，其他的（变量，react元素，事件等）必须用{}赋值给props</code></pre><h4 id=\\\"3、ref\\\">3、ref</h4>\\n<p>表示为对组件真正实例的引用</p>\\n<pre><code>&lt;input type=&quot;text&quot; ref={this.setTextInputRef} /&gt;\\n\\n\\nthis.setTextInputRef = element =&gt; {\\n  this.textInput = element;  //element为普通的javascript dom，textInput持有input dom,  \\n  //this.textInput赋值之前，可以不用在constructor中提前声明。直接赋值\\n};\\n\\nthis.myRef = React.createRef();\\n\\n\\n//可以在其他地方操作dom\\nthis.textInput.focus();\\nthis.textInput.value;  //获取value属性</code></pre><p>但是无状态组件，不能有ref属性</p>\\n<h4 id=\\\"4、事件\\\">4、事件</h4>\\n<p>采用驼峰法 onClick，onChange...名字和普通的js事件一致</p>\\n<pre><code>&lt;div onClick={this.handleClick}&gt;click me&lt;/div&gt;\\n\\n//作为事件的函数必须用箭头函数的形式，才能绑定this\\nhandleClick = (event) =&gt; {\\n  event.target.value    //如果为input元素，可以获取其上的值\\n};\\n\\n\\n//给事件传递参数。比如删除列表时的id\\n&lt;div onClick={(e)=&gt;this.handleClick(e,&quot;123&quot;)}&gt;click me&lt;/div&gt;\\n\\n//作为事件的函数必须用箭头函数的形式，才能绑定this\\nhandleClick = (event,id) =&gt; {\\n  event.target.value    //如果为input元素，可以获取其上的值\\n  // 对 id 操作\\n};\\n</code></pre><h4 id=\\\"5、样式\\\">5、样式</h4>\\n<p>可以通过import导入css文件，但是引入的样式，会在当前组件和所有子组件，孙子组件中都能通过访问到。</p>\\n<p>可以使用className给元素设置class样式，之所以不用class的原因是，在react中class关键字已经被用来定义组件类了。</p>\\n<p>可以使用style来给元素设置样式属性，其值必须为一个对象，对象中的css的属性采用驼峰法。</p>\\n<pre><code>//采用className\\n&lt;div className=&quot;App&quot;&gt;&lt;/div&gt;\\n\\n//采用style\\n//可以在组件外部提前定义好\\nconst div1 = {\\n  width: &quot;300px&quot;,\\n  margin: &quot;30px auto&quot;,\\n  backgroundColor: &quot;#44014C&quot;,  //驼峰法\\n  minHeight: &quot;200px&quot;,\\n  boxSizing: &quot;border-box&quot;\\n};\\n\\n//然后再render中即可\\n&lt;div style={div1}&gt;\\n</code></pre><h4 id=\\\"6、条件渲染-和-列表渲染\\\">6、条件渲染 和 列表渲染</h4>\\n<p>条件渲染</p>\\n<pre><code>//render函数\\nif (isLoggedIn) {\\n  button = &lt;div&gt;1&lt;/div&gt;;\\n} else {\\n  button = &lt;div&gt;2&lt;/div&gt;;\\n}\\n\\nreturn (\\n    &lt;div&gt;{button}&lt;/div&gt;\\n)\\n\\n//可以返回null，让组件 返回null,则禁止渲染组件。 //但componentWillUnmount和componentDidMount会执行\\n//render(){\\n//  return null;\\n//}\\n//类似于vue中的v-if\\n\\n\\n//或者通过一个无状态组件，在其中进行if else判断，并返回</code></pre><p>列表渲染</p>\\n<pre><code>三种方式，\\n第一种，在return前，将列表计算完成，并嵌入  dom中  {listItem}\\n第二种，直接在dom中计算  \\n  {\\n      list.map(item =&gt; {\\n        return &lt;li key={item + &quot;003&quot;}&gt;{item}&lt;/li&gt;;\\n      })\\n  }\\n第三种，使用无状态组件，&lt;ListComponent data={list} /&gt;    推荐\\n\\n必须提供 key 属性。\\n当你在map()方法的内部调用元素时，你最好随时记得为每一个元素加上一个独一无二的key。元素的key在他的兄弟元素之间应该唯一</code></pre><h4 id=\\\"7、jsx（javascript-xml）\\\">7、JSX（javascript xml）</h4>\\n<p>使用点 表示法</p>\\n<pre><code>const MyComponents = {\\n  DatePicker: function DatePicker(props) {\\n    return &lt;div&gt;Imagine a {props.color} datepicker here.&lt;/div&gt;;\\n  }\\n}\\n\\nfunction BlueDatePicker() {\\n  return &lt;MyComponents.DatePicker color=&quot;blue&quot; /&gt;;\\n}</code></pre><p>在运行时选择类型</p>\\n<pre><code>function Story(props) {\\n  // 错误！JSX 标签名不能为一个表达式。\\n  return &lt;components[props.storyType] story={props.story} /&gt;;\\n}\\n\\nfunction Story(props) {\\n  // 正确！JSX 标签名可以为大写开头的变量。\\n  const SpecificStory = components[props.storyType];\\n  return &lt;SpecificStory story={props.story} /&gt;;\\n}</code></pre><p>属性</p>\\n<pre><code>//使用javascript表达式\\n&lt;MyComponent foo={1 + 2 + 3 + 4} /&gt;\\n\\n//字符串常量\\n&lt;MyComponent message=&quot;hello world&quot; /&gt;\\n//等价于 下面\\n&lt;MyComponent message={&#39;hello world&#39;} /&gt;\\n\\n\\n//默认为 True\\n&lt;MyTextBox autocomplete /&gt;\\n//等价于后面\\n&lt;MyTextBox autocomplete={true} /&gt;\\n\\n\\n//扩展属性, 下面两个等效\\nfunction App1() {\\n  return &lt;Greeting firstName=&quot;Ben&quot; lastName=&quot;Hector&quot; /&gt;;\\n}\\n\\nfunction App2() {\\n  const props = {firstName: &#39;Ben&#39;, lastName: &#39;Hector&#39;};\\n  return &lt;Greeting {...props} /&gt;;\\n}\\n\\n\\n//子代  props.children. 可以像其它属性一样传递任何数据，而不仅仅是 React 元素\\n&lt;MyComponent&gt;Hello world!&lt;/MyComponent&gt;\\n\\n&lt;Repeat numTimes={10}&gt;\\n    {(index) =&gt; &lt;div key={index}&gt;This is item {index} in the list&lt;/div&gt;}\\n&lt;/Repeat&gt;\\n\\nfunction Repeat(props) {\\n  let items = [];\\n  for (let i = 0; i &lt; props.numTimes; i++) {\\n    items.push(props.children(i));  //props.children(i)  此时(index) =&gt;参数接受不同的i值，渲染不同的结果\\n  }\\n  return &lt;div&gt;{items}&lt;/div&gt;;\\n}\\n\\n\\n\\n//布尔值、Null 和 Undefined 被忽略, 不会显示在界面上。下面等价\\n&lt;div /&gt;\\n&lt;div&gt;&lt;/div&gt;\\n&lt;div&gt;{false}&lt;/div&gt;\\n&lt;div&gt;{null}&lt;/div&gt;\\n&lt;div&gt;{undefined}&lt;/div&gt;\\n&lt;div&gt;{true}&lt;/div&gt;\\n //这在利用短路的特性，判断是否渲染组件非常有用,showHeader如果为false，则压根不渲染后面的组件。生命周期钩子全都不进。\\n&lt;div&gt;\\n  {showHeader &amp;&amp; &lt;Header /&gt;}\\n&lt;/div&gt;\\n\\n如果你想让null，boolean值出现在渲染中，则需要转为字符串</code></pre><p>{String(myVariable)}</p>\\n<pre><code></code></pre><h4 id=\\\"8、react中的变量的定义和使用\\\">8、react中的变量的定义和使用</h4>\\n<p>1)、将变量定义在state上。  对于组件中的表单数据或者isShow，isLoading之类的与状态有关的，可以定义到state上，这样的好处是既可在react-devtools中看到，并且还能通过setState修改后，页面渲染完成，立马进行其他的判断(类似于nextTick)</p>\\n<p>2)、将变量直接定义在this上。\\n对于组件中很少改动的数据，如引用类型。具体ref的引用等，可以定义在 this上。</p>\\n<pre><code>this.setTextInputRef = element =&gt; {\\n  this.textInput = element;  //element为普通的javascript dom，textInput持有input dom,  \\n  //this.textInput赋值之前，可以不用在constructor中提前声明。直接赋值\\n};</code></pre><p>this.textInput获得值后，很少再改变，之后都是通过操作dom</p>\\n<pre><code>this.textInput.focus();\\nthis.textInput.value;  //获取value属性</code></pre><h4 id=\\\"9、react中定义组件的方法\\\">9、react中定义组件的方法</h4>\\n<pre><code>//1、通过 extends Component 的class类，为有状态组件\\nclass Model extends Component {\\n\\n}\\n\\n//2、通过 定义一个function, （可以传入props）,return 出一个 dom对象。为无状态组件\\nconst PandaSvg = (props) =&gt; (\\n   //props上有传入的PandaSvg的属性和children，比如props.name   props.children\\n  &lt;div&gt;&lt;/div&gt;\\n);\\n// 高阶组件\\nfunction Base(Wrapper) {\\n  return class Base extends Component {\\n    render() {\\n      return (\\n        &lt;div&gt;\\n          &lt;Wrapper&gt;&lt;/Wrapper&gt;\\n        &lt;/div&gt;\\n      );\\n    }\\n  };\\n}\\n\\n//3、react dom\\n&lt;Form&gt;\\n    &lt;div&gt;&lt;/div&gt;\\n&lt;/Form&gt;</code></pre><p>所以在遇到 一个组件的参数需要传入组件时，可以使用上面3种的任意一种；</p>\\n<pre><code>//使用无状态组件\\n&lt;Icon component={PandaSvg}/&gt;</code></pre><h4 id=\\\"10、react中引入静态文件的方式\\\">10、react中引入静态文件的方式</h4>\\n<pre><code>import logo from &quot;@/assets/images/logo.svg&quot;;\\n\\n//render中\\n&lt;img src={logo}/&gt;</code></pre><pre><code>import fist from &quot;@/assets/images/2131.png&quot;;\\nimport styled from &quot;styled-components&quot;;\\n\\nconst SelfButton = styled.div`\\n  height: 150px;\\n  width: 150px;\\n  background-image: url(${props =&gt; props.src});\\n  background-size: 150px 150px;\\n`;\\n\\n\\n//render中\\n&lt;SelfButton src={fist}&gt;\\n   SelfButton\\n&lt;/SelfButton&gt;</code></pre><h3 id=\\\"二、高级\\\">二、高级</h3>\\n<h4 id=\\\"1、生命周期\\\">1、生命周期</h4>\\n<pre><code>//父  子组件的生命周期执行属性\\n 初始化   \\n      父 constructor==&gt;componentWillMount==&gt;render                                                                ==&gt;componentDidMount\\n      子                                          ==&gt;constructor==&gt;componentWillMount==&gt;render==&gt;componentDidMount\\n\\n更新\\n      父  shouldComponentUpdate==&gt;componentWillUpdate==&gt;render                                                                                                        ==&gt;componentDidUpdate\\n      子                                                      ==&gt;componentWillReceiveProps==&gt;shouldComponentUpdate==&gt;componentWillUpdate==&gt;render==&gt;componentDidUpdate  </code></pre><h4 id=\\\"2、碎片fragment\\\">2、碎片Fragment</h4>\\n<pre><code>class Columns extends React.Component {\\n    render() {\\n      return (\\n        &lt;div&gt;\\n          &lt;td&gt;Hello&lt;/td&gt;\\n          &lt;td&gt;World&lt;/td&gt;\\n        &lt;/div&gt;\\n      );\\n    }\\n}</code></pre><p>因为render方法返回的元素必须有个跟节点，此处的td元素外面有个div，如果我们不想要这个div。而是直接返回两个td呢?</p>\\n<pre><code>//使用 &lt;&gt;&lt;/&gt; 包裹元素\\nclass Columns extends React.Component {\\n    render() {\\n      return (\\n        &lt;&gt;\\n          &lt;td&gt;Hello&lt;/td&gt;\\n          &lt;td&gt;World&lt;/td&gt;\\n        &lt;/&gt;\\n      );\\n    }\\n}</code></pre><p>但是&lt;&gt;&lt;/&gt; 不能设置key值，如果要设置key值，则用React.Fragment</p>\\n<pre><code>&lt;React.Fragment key={“001”}&gt;\\n  &lt;td&gt;Hello&lt;/td&gt;\\n  &lt;td&gt;World&lt;/td&gt;\\n&lt;/React.Fragment&gt;</code></pre><h4 id=\\\"3、传送门createportal\\\">3、传送门createPortal</h4>\\n<pre><code>&lt;Modal&gt;\\n   Child /&gt;\\n&lt;/Modal&gt;</code></pre><p>默认会将Child组件放入Modal组件的某个位置，但是如果我们希望将Child放在一个Modal外面的地方呢？</p>\\n<p>此时在Modal中只需要通过 ReactDOM.createPortal 设置一个传送门即可。</p>\\n<pre><code>  const appRoot = document.getElementById(&quot;root&quot;);\\n  class Model extends Component {\\n    constructor(props) {\\n      super(props);\\n      this.el = document.createElement(&quot;div&quot;); //只能先创建，不能直接从界面获取，会报dom不存在。\\n    }\\n    componentDidMount() {\\n      appRoot.appendChild(this.el);  //等创建的el被传送出去之后，再挂到appRoot下，就能看到了。否则不挂看不到\\n    }\\n    render() {\\n      return ReactDOM.createPortal(this.props.children, this.el);\\n    }\\n  }\\n\\n  export default Model;</code></pre><h4 id=\\\"4、过渡和动画\\\">4、过渡和动画</h4>\\n<pre><code>&gt; yarn add react-transition-group.\\n&gt; yarn add animate.css</code></pre><blockquote>\\n<p>react-transition-group库有三个组件:</p>\\n<p>1)、Transitiong过渡  表示元素在多个状态之间的切换，比如active，hover等。==它下面的元素总会显示==，只是根据不同的条件显示不同的元素，然后在这几个元素间过渡切换</p>\\n<p>2)、CSSTransition 单个元素的显示和隐藏。 </p>\\n<p>3)、TransitionGroup 一组元素间的显示和隐藏(比如list的新增，删除)</p>\\n</blockquote>\\n<h5 id=\\\"41、transition的使用\\\">4.1、Transition的使用</h5>\\n<pre><code>import {Transition} from &quot;react-transition-group&quot;;\\n\\n//render中\\n&lt;Transition in={show} timeout={3000}&gt;\\n    {status =&gt; {\\n      if (status == &quot;entering&quot;) return &lt;div&gt;entering&lt;/div&gt;;\\n      if (status == &quot;entered&quot;) return &lt;div&gt;entered&lt;/div&gt;;\\n      if (status == &quot;exiting&quot;) return &lt;div&gt;exiting&lt;/div&gt;;\\n      if (status == &quot;exited&quot;) return &lt;div&gt;exited&lt;/div&gt;;\\n    }}\\n&lt;/Transition&gt;</code></pre><p>此处的show的值，并不是指定Transition展示还是不展示。\\nTransition会直接加载，然后通过show的值判断status加载children的东西。\\n如果show为true，会依次返回条件为entering和entered组件。\\n如果show为false，则依次返回条件为exiting和exited组件。</p>\\n<p>在Transition上使用animate.css中预设的动画</p>\\n<pre><code>import  &quot;animate.css&quot;\\n\\n//render\\n&lt;Transition in={show} timeout={3000}&gt;\\n  {status =&gt; {\\n    if (status == &quot;entering&quot;) return &lt;div className=&quot;animated lightSpeedIn &quot;&gt;entering&lt;/div&gt;;\\n    if (status == &quot;entered&quot;) return &lt;div&gt;entered&lt;/div&gt;;\\n    if (status == &quot;exiting&quot;) return &lt;div className=&quot;animated lightSpeedOut&quot;&gt;exiting&lt;/div&gt;;\\n    if (status == &quot;exited&quot;) return &lt;div&gt;exited&lt;/div&gt;;\\n  }}\\n&lt;/Transition&gt;</code></pre><h5 id=\\\"42、csstransition-的使用\\\">4.2、CSSTransition 的使用</h5>\\n<pre><code>import { CSSTransition } from &quot;react-transition-group&quot;;\\n//render中\\n&lt;CSSTransition\\n    in={this.state.show}\\n    timeout={300}\\n    classNames=&quot;message&quot;\\n    unmountOnExit\\n    onExited={() =&gt; {\\n        this.setState({\\n          showValidationButton: true\\n        });\\n    }}&gt;\\n    &lt;div&gt;hello&lt;/div&gt;\\n&lt;/CSSTransition&gt;</code></pre><p>CSSTransition组件的in如果为false，则里面的元素都不显示，如果为true，则显示。</p>\\n<p>classNames的message前缀代表了一组动画的名称，需要在css中定义:</p>\\n<pre><code>  /* 开始进入状态 */\\n  .message-enter {\\n    opacity: 0.01;\\n    transform: scale(0.9) translateY(50%);\\n  }\\n  /* 进入中 */\\n  .message-enter-active {\\n    opacity: 1;\\n    transform: scale(1) translateY(10%);\\n    transition: all 300ms ease-out;\\n  }\\n  /* 开始退出 */\\n  .message-exit {\\n    opacity: 1;\\n    transform: scale(1) translateY(0%);\\n  }\\n  /* 退出中 */\\n  .message-exit-active {\\n    opacity: 0.01;\\n    transform: scale(0.9) translateY(50%);\\n    transition: all 300ms ease-out;\\n  }</code></pre><p>这些都是定义的元素在显示和消失过称中的样式，与最终界面显示的样式无关\\nCSSTransition上同时还可以监听以下的事件。</p>\\n<pre><code>onEnter \\nonEntering\\nonEntered\\nonExit\\nonExiting\\nonExited</code></pre><p>在CSSTransition上使用animate.css中预设的动画</p>\\n<pre><code>import  &quot;animate.css&quot;\\n\\n&lt;CSSTransition\\n  in={this.state.showValidationMessage}\\n  timeout={300}\\n  classNames={{\\n    enterActive: &quot;animated lightSpeedIn&quot;,\\n    exitActive: &quot;animated lightSpeedOut&quot;\\n  }}&gt;\\n  &lt;div&gt;hello&lt;/div&gt;\\n&lt;/CSSTransition&gt;</code></pre><p>将原来的通过classNames设置前缀的方式改为，直接修改对应动画过称的class名。</p>\\n<h5 id=\\\"43、transitiongroup的使用\\\">4.3、TransitionGroup的使用</h5>\\n<pre><code>import { TransitionGroup } from &quot;react-transition-group&quot;;\\n\\n//render方法\\n&lt;TransitionGroup&gt;\\n    {this.state.items.map(({ id, text }) =&gt; (\\n        &lt;CSSTransition key={id} timeout={500} classNames=&quot;fade&quot;&gt;\\n          &lt;div&gt;\\n            &lt;Button&gt;&amp;times;&lt;/Button&gt;{text}\\n          &lt;/div&gt;\\n        &lt;/CSSTransition&gt;\\n    ))}\\n&lt;/TransitionGroup&gt;</code></pre><p>TransitionGroup下必须包裹CSSTransition子元素。TransitionGroup上不设置classNames。</p>\\n<p>在TransitionGroup上使用animate.css中预设的动画</p>\\n<pre><code>import  &quot;animate.css&quot;\\n\\n&lt;TransitionGroup&gt;\\n  {this.state.items.map(({ id, text }) =&gt; (\\n    &lt;CSSTransition \\n      key={id} \\n      timeout={500} \\n      classNames={{\\n        enterActive: &quot;animated lightSpeedIn&quot;,\\n        exitActive: &quot;animated lightSpeedOut&quot;\\n      }}&gt;\\n      &lt;div&gt;\\n        &lt;Button&gt;&amp;times;&lt;/Button&gt;{text}\\n      &lt;/div&gt;\\n    &lt;/CSSTransition&gt;\\n  ))}\\n&lt;/TransitionGroup&gt;</code></pre><p>同理，也将classNames替换。</p>\\n<p>==注意:==\\n由于react-transition-group定义了动画持续时间timeout，而aniamte.css也有时间，所以两者必须要设置一致。否则一个过渡完了，另一个时间还没到。</p>\\n<h4 id=\\\"5、css-in-js\\\">5、CSS in JS</h4>\\n<p>在react中，如果引入一个.css文件，那么这个文件中的样式，不仅会作用于当前组件，还会作用于当前组件的所有子组件。</p>\\n<p>为了解决这种非组件专属的css，引入下面的几种方式:</p>\\n<h5 id=\\\"1、styled-components\\\">1)、styled-components</h5>\\n<p>使用步骤:</p>\\n<pre><code>&gt; yarn add styled-components</code></pre><pre><code>//import &quot;./style.css&quot;;\\n//将css文件改为js\\nimport &quot;./style.js&quot;;</code></pre><pre><code>import styled from &quot;styled-components&quot;;\\n\\n//表示创建一个带样式的div组件，组件名为SelfLink(注意命名方式)\\nexport const SelfLink = styled.div`\\n  height:50px;\\n  color:blue;\\n`\\n\\nexport const SelfAbbr = styled.abbr`\\n  height:50px;\\n  color:blue;\\n  background-color: yellow;   //和直接在页面上使用style对象不同。style需要驼峰法\\n`</code></pre><pre><code>import { SelfLink, SelfAbbr } from &quot;./style.js&quot;;\\n//SelfLink样式组件只对当前组件有效，有后代组件无效\\n\\n//在react组件的render方法中\\n&lt;selfLink&gt;app.js&lt;/selfLink&gt;\\n//它等价于\\n&lt;div style=&quot;height:50px;color:blue;&quot;&gt;app.js&lt;/div&gt;\\n\\n//给样式组件设置属性\\n&lt;SelfAbbr title=&quot;People&#39;s Republic of China&quot;&gt;PRC&lt;/SelfAbbr&gt;\\n等价于\\n&lt;abbr title=&quot;People&#39;s Republic of China&quot;&gt;PRC&lt;/abbr&gt;</code></pre><p>这样我们可以在根组件下导入一个reset.css文件，然后在每个自身组件下导入 styled-components 样式组件。</p>\\n<p>styled.*后面不能随便加元素。必须是下面类型中的一种</p>\\n<pre><code>//html = \\n&#39;a&#39;, &#39;abbr&#39;, &#39;address&#39;, &#39;area&#39;, &#39;article&#39;, &#39;aside&#39;, &#39;audio&#39;, \\n&#39;b&#39;, &#39;base&#39;, &#39;bdi&#39;, &#39;bdo&#39;, &#39;big&#39;, &#39;blockquote&#39;, &#39;body&#39;, &#39;br&#39;, &#39;button&#39;, \\n&#39;canvas&#39;, &#39;caption&#39;, &#39;cite&#39;, &#39;code&#39;, &#39;col&#39;, &#39;colgroup&#39;, \\n&#39;data&#39;, &#39;datalist&#39;, &#39;dd&#39;, &#39;del&#39;, &#39;details&#39;, &#39;dfn&#39;, &#39;dialog&#39;, &#39;div&#39;, &#39;dl&#39;, &#39;dt&#39;, \\n&#39;em&#39;, &#39;embed&#39;, \\n&#39;fieldset&#39;, &#39;figcaption&#39;, &#39;figure&#39;, &#39;footer&#39;, &#39;form&#39;, \\n&#39;h1&#39;, &#39;h2&#39;, &#39;h3&#39;, &#39;h4&#39;, &#39;h5&#39;, &#39;h6&#39;, &#39;head&#39;, &#39;header&#39;, &#39;hgroup&#39;, &#39;hr&#39;, &#39;html&#39;, \\n&#39;i&#39;, &#39;iframe&#39;, &#39;img&#39;, &#39;input&#39;, &#39;ins&#39;, &#39;kbd&#39;, &#39;keygen&#39;, &#39;label&#39;, &#39;legend&#39;, &#39;li&#39;, &#39;link&#39;, \\n&#39;main&#39;, &#39;map&#39;, &#39;mark&#39;, &#39;marquee&#39;, &#39;menu&#39;, &#39;menuitem&#39;, &#39;meta&#39;, &#39;meter&#39;, &#39;nav&#39;, &#39;noscript&#39;, \\n&#39;object&#39;, &#39;ol&#39;, &#39;optgroup&#39;, &#39;option&#39;, &#39;output&#39;, &#39;p&#39;, &#39;param&#39;, &#39;picture&#39;, &#39;pre&#39;, &#39;progress&#39;, \\n&#39;q&#39;, &#39;rp&#39;, &#39;rt&#39;, &#39;ruby&#39;, &#39;s&#39;, &#39;samp&#39;, &#39;script&#39;, &#39;section&#39;, &#39;select&#39;, &#39;small&#39;, &#39;source&#39;, &#39;span&#39;, &#39;strong&#39;, &#39;style&#39;, &#39;sub&#39;, &#39;summary&#39;, &#39;sup&#39;, \\n&#39;table&#39;, &#39;tbody&#39;, &#39;td&#39;, &#39;textarea&#39;, &#39;tfoot&#39;, &#39;th&#39;, &#39;thead&#39;, &#39;time&#39;, &#39;title&#39;, &#39;tr&#39;, &#39;track&#39;, &#39;u&#39;, &#39;ul&#39;, &#39;var&#39;, &#39;video&#39;, &#39;wbr&#39;,\\n\\n// SVG\\n&#39;circle&#39;, &#39;clipPath&#39;, &#39;defs&#39;, &#39;ellipse&#39;, &#39;foreignObject&#39;, \\n&#39;g&#39;, &#39;image&#39;, &#39;line&#39;, &#39;linearGradient&#39;, &#39;mask&#39;, \\n&#39;path&#39;, &#39;pattern&#39;, &#39;polygon&#39;, &#39;polyline&#39;, &#39;radialGradient&#39;, &#39;rect&#39;, \\n&#39;stop&#39;, &#39;svg&#39;, &#39;text&#39;, &#39;tspan&#39;\\n</code></pre><p>比如写styled.img就会报错</p>\\n<p><strong>高级用法</strong></p>\\n<pre><code>//styled-components中使用属性\\n&lt;SelfButton type=&quot;primary&quot;&gt;SelfButton&lt;/SelfButton&gt;\\n\\n//使用${(props)=&gt;{//todo}}  获取值\\nexport const SelfButton = styled.div`\\n  height:50px;\\n  color:${props =&gt; (props.type === &quot;primary&quot; ? &quot;palevioletred&quot; : &quot;yellow&quot;)};\\n`\\n//如果 props.type? &quot;palevioletred&quot; : &quot;yellow&quot; 表示是否存在type属性，不管值是多少</code></pre><p>注意在css中 使用颜色时，不需要加引号，palevioletred即可，而在${()=&gt;()}表达式中，因为无法识别palevioletred，所以使用引号&quot;palevioletred&quot;,但在最后解析完，在chrome中还是展示  color:palevioletred。</p>\\n<p>使用${}  获取值时，比如传入一个函数(props)=&gt;{}，参数为props，然后将结果在函数中返回</p>\\n<pre><code>//styled-components中使用继承\\nexport const BaseButton = styled.div`\\n  height: 50px;\\n  width:100px;\\n  border:1px solid red;\\n  color:yellow;\\n`;\\n\\n//styled(BaseButton)中传入要嵌套的css组件\\nexport const PrimaryButton = styled(BaseButton)`\\n  color: palevioletred;\\n`;</code></pre><p>PrimaryButton组件继承了BaseButton组件的样式，并且使用自身的color:palevioletred,将继承的 color:yellow;覆盖掉，最终PrimaryButton结果:</p>\\n<pre><code>{\\n  height: 50px;\\n  width:100px;\\n  border:1px solid red;\\n  color:palevioletred;\\n}</code></pre><p>当然，你任然可以在 PrimaryButton 组件上使用style属性，设置行内样式。</p>\\n<pre><code>&lt;SelfButton color=&quot;palevioletred&quot; style={{color:&quot;pink&quot;}}&gt;SelfButton&lt;/SelfButton&gt;\\n//则最终color为pink</code></pre><h5 id=\\\"2、radium\\\">2)、Radium</h5>\\n<p>Radium是一组用于管理React元素上的内联样式的工具.\\n在传统的内联css中，对于处理变量、媒体查询、伪类等是不方便的。</p>\\n<p>而Radium可以直接处理这些问题，并且可以直接使用js中的数学，连接，正则表达式，条件，函数等。</p>\\n<p><strong>使用步骤:</strong></p>\\n<pre><code>//1\\nimport Radium from &#39;radium&#39;;\\n\\n//2 定义样式\\nvar styles = {\\n  base: {\\n    color: &#39;#fff&#39;,\\n\\n    &#39;:hover&#39;: {\\n      background: &#39;#0074d9&#39;\\n    }\\n  },\\n\\n  primary: {\\n    background: &#39;#0074D9&#39;\\n  },\\n\\n  warning: {\\n    background: &#39;#FF4136&#39;\\n  }\\n};\\n\\n//3 在元素的内敛属性style上使用\\n&lt;button\\n    style={[\\n      styles.base,\\n      styles[this.props.kind]\\n    ]}&gt;\\n    {this.props.children}\\n&lt;/button&gt;\\n\\n//4 包裹组件\\nexport default Radium(Form);</code></pre><p><strong>用法详解:</strong></p>\\n<pre><code>var styles = {\\n  base: {\\n    background: &#39;blue&#39;,\\n    border: 0,\\n    borderRadius: 4,\\n    color: &#39;white&#39;,\\n    padding: &#39;1.5em&#39;\\n  }\\n};\\n\\n&lt;button style={styles.base}&gt;\\n    {this.props.children}\\n&lt;/button&gt;</code></pre><p>修饰符</p>\\n<pre><code>var styles = {\\n  base: {  //这个base应用到那个react元素上，那么那个react元素获得:hover的样式\\n    &#39;:hover&#39;: {\\n      backgroundColor: &#39;red&#39;\\n    },\\n\\n    &#39;:focus&#39;: {\\n      backgroundColor: &#39;green&#39;\\n    },\\n\\n    &#39;:active&#39;: {\\n      backgroundColor: &#39;yellow&#39;\\n    },\\n  },\\n};\\n\\n&lt;button style={styles.base}&gt;\\n    {this.props.children}\\n&lt;/button&gt;</code></pre><p>媒体查询</p>\\n<pre><code>var style = {\\n  width: &#39;25%&#39;,\\n\\n  &#39;@media (min-width: 320px)&#39;: {\\n    width: &#39;100%&#39;\\n  }\\n};\\n\\n&lt;button style={styles}&gt;\\n    {this.props.children}\\n&lt;/button&gt;\\n\\n\\n\\n\\n//还可以在媒体查询中嵌套修饰符\\nvar style = {\\n  width: &#39;25%&#39;,\\n\\n  &#39;@media (min-width: 320px)&#39;: {\\n    width: &#39;100%&#39;,\\n\\n    &#39;:hover&#39;: {\\n      background: &#39;white&#39;\\n    }\\n  }\\n};\\n&lt;button style={styles}&gt;\\n    {this.props.children}\\n&lt;/button&gt;</code></pre><p>在单个组件中设置多个元素的样式</p>\\n<pre><code>var styles = {\\n  both: {\\n    background: &#39;black&#39;,\\n    border: &#39;solid 1px white&#39;,\\n    height: 100,\\n    width: 100\\n  },\\n  one: {\\n    &#39;:hover&#39;: {\\n      background: &#39;blue&#39;,\\n    }\\n  },\\n  two: {\\n    &#39;:hover&#39;: {\\n      background: &#39;red&#39;,\\n    }\\n  }\\n};\\n&lt;div key=&quot;one&quot; style={[styles.both, styles.one]} /&gt;\\n&lt;div key=&quot;two&quot; style={[styles.both, styles.two]} /&gt;</code></pre><h3 id=\\\"三、redux\\\">三、redux</h3>\\n<p><img src=\\\"https://github.com/libbGit/static-file/blob/master/image/react/redux-flow.jpg?raw=true\\\" alt=\\\"image\\\"></p>\\n<p>应用中所有的 state 都以一个对象树的形式储存在一个单一的 store 中。 惟一改变 state 的办法是触发 action，一个描述发生什么的对象。 为了描述 action 如何改变 state 树，你需要编写 reducers。</p>\\n<p>从图中我们得出以下执行步骤:</p>\\n<ul>\\n<li>1)、react组件通过action creator获得一个action对象，</li>\\n<li>2)、在react组件中通过store的dispatch方法传入并执行这个action</li>\\n<li>3)、store接受到这个action，然后执行reducers方法，将上一次的state和当前的action传入</li>\\n<li>4)、在reducer中判断action的type，然后执行对应逻辑，并将新的state返回给store</li>\\n<li>5)、在react组件中监听到store的state的改变，进而做出响应，改变页面数据</li>\\n</ul>\\n<p>redux中的store提供下列方法:</p>\\n<ul>\\n<li>getState();  获取当前的state树</li>\\n<li>dispatch(action);  分发action</li>\\n<li>subscribe(listener);  监听store中state的改变</li>\\n</ul>\\n<p>react本身和redux没什么关系，因为react是view层面的框架，redux是状态管理的框架，使用react-redux将两者联系起来，react-redux只有两个接口:</p>\\n<ul>\\n<li>Provider  在根组件中使用，使得所以子组件都能够获得 Redux store</li>\\n<li>connect   在组件中连接 React 组件与 Redux store，可以获取state和dispatch。</li>\\n</ul>\\n<p><strong>redux的中间件</strong>\\n<img src=\\\"https://github.com/libbGit/static-file/blob/master/image/react/redux-thunk.jpg?raw=true\\\" alt=\\\"image\\\">\\n正常情况下，action是个对象，包含type和payload，当redux调用dispath之后，store直接接受action，并找到对应的reducers去执行。</p>\\n<p>而如果使用中间件之后，action可以是个方法，在这个方法中可以执行异步操作。这样，当redux调用dispatch后，store发现action是个方法，则不会直接给reducer，而是先执行方法，然后再方法执行结束之后，显示调用dispatch方法，store才会去调 reducer。</p>\\n<p>常用的redux中间件有:</p>\\n<ul>\\n<li>redux-thunk</li>\\n<li>redux-saga</li>\\n<li>Redux-Promise</li>\\n</ul>\\n<p>下面是使用redux和redux-thunk的示例:</p>\\n<pre><code>//App.js\\nimport React from &quot;react&quot;;\\nimport ReactDOM from &quot;react-dom&quot;;\\nimport &quot;@/assets/css/index.css&quot;;\\nimport App from &quot;@/App&quot;;\\nimport * as serviceWorker from &quot;@/serviceWorker&quot;;\\n\\nimport { BrowserRouter } from &quot;react-router-dom&quot;;\\nimport { Provider } from &quot;react-redux&quot;;\\nimport { PersistGate } from &quot;redux-persist/integration/react&quot;;  //将redux持久化\\n\\nimport configureStore from &quot;@/store/Index&quot;;\\nconst { store, persistor } = configureStore;\\n\\nReactDOM.render(\\n  &lt;Provider store={store}&gt;\\n    &lt;PersistGate loading={null} persistor={persistor}&gt;\\n      &lt;BrowserRouter&gt;\\n        &lt;App /&gt;\\n      &lt;/BrowserRouter&gt;\\n    &lt;/PersistGate&gt;\\n  &lt;/Provider&gt;,\\n  document.getElementById(&quot;root&quot;)\\n);</code></pre><pre><code>//store.js\\nimport { createStore, applyMiddleware, compose } from &quot;redux&quot;;\\nimport { persistStore, persistCombineReducers } from &quot;redux-persist&quot;;\\nimport storage from &quot;redux-persist/lib/storage/index&quot;; // defaults to localStorage for web and AsyncStorage for react-native\\n\\nimport reducers from &quot;./reducers/Index&quot;;\\nimport thunk from &quot;redux-thunk&quot;;\\n\\n//持久化key\\nconst config = { key: &quot;root&quot;, storage };\\nlet persistedReducer = persistCombineReducers(config, reducers); //将redux持久化，并将多个reducer combine起来\\n\\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; //配置redux devtools\\n\\nlet store = createStore(persistedReducer, composeEnhancers(applyMiddleware(thunk)));\\nlet persistor = persistStore(store);\\n\\nexport default { store, persistor };</code></pre><pre><code>// Login组件中\\nexport default withRouter(\\n  connect(\\n    state =&gt; ({\\n      userInfo: state.User   //指定user模块的state，作为属性传入\\n    }),\\n    dispatch =&gt; ({\\n      onSaveLoginInfo: value =&gt; {\\n        //将修改action的函数，作为一个属性传入。\\n        //此处并未指定执行那个模块的reducer，因为它会在所有的模块中寻找。直到找到对应的action.type的那个reducer并执行，然后更新对应模块的state\\n        dispatch(UserActions.saveLoginInfo(value)); //dispatch中传入的是个action对象，saveUserInfo只是个action的创建函数\\n      }\\n    })\\n  )(Login)\\n);</code></pre><p>redux执行action时，是遍历所有加载的模块的reducer，然后找到匹配模块的去执行。并更新那个模块的state</p>\\n<h3 id=\\\"四、route\\\">四、route</h3>\\n<pre><code>&gt; yarn add react-router-dom</code></pre><p>在组件中按需加载，rect-router4中不在进行集中配置。即在当前组件中定义link和匹配到link后需要跳转的组件</p>\\n<p>如果子组件需要获取路由的信息，则必须使用withRouter包裹，所以将withRouter放到根组件下</p>\\n<pre><code>class App extends Component {\\n}\\nexport default withRouter(App);</code></pre><p>这样，App下的所有组件,都能获取到通过this.props获取到==history,location,match== 三个路由参数</p>\\n<h5 id=\\\"1、路由的3中渲染方式\\\">1)、路由的3中渲染方式:</h5>\\n<ul>\\n<li><Route component>  </li>\\n<li><Route render></li>\\n<li><Route children>\\n可以任意的使用其中的一种，不能同时使用多种。\\n\\n\\n</li>\\n</ul>\\n<pre><code>import {  Switch, Route, Link } from &quot;react-router-dom&quot;;</code></pre><pre><code>//&lt;Route component&gt;   \\n&lt;Route path=&quot;/user/:username&quot; component={User} /&gt;\\n</code></pre><pre><code>//&lt;Route render&gt;   这种方式不会将组件卸载，而是直接在线更新渲染。\\n//props中含有history,location,match 3个属性。 render方式可以充当路由钩子，可以在满足条件时渲染组件。(router V4中取消了路由钩子)\\n&lt;Route path=&quot;/user&quot; render={props =&gt; (\\n    this.state.auth ? (\\n        &lt;Component {...props}/&gt;\\n    ) : (\\n        &lt;Redirect to={{\\n            pathname: &#39;/login&#39;,\\n            state: { from: props.location }\\n        }}/&gt;\\n    )\\n)}/&gt;\\n</code></pre><pre><code>//&lt;Route children&gt;  和render类似，只是它用来判断当前路径和路由是否匹配，children中可以接收history,location,match 3个属性。如果不匹配，match为null。这允许您根据路径是否匹配动态调整UI。\\n&lt;Route path={to} children={({ match }) =&gt; (\\n      &lt;li className={match ? &quot;active&quot; : &quot;&quot;}&gt;\\n        &lt;Link to={to} {...rest} /&gt;\\n      &lt;/li&gt;\\n)}/&gt;</code></pre><p>父和子组件的路由嵌套</p>\\n<pre><code>//父组件中\\n&lt;Link to=&quot;/&quot;&gt;home&lt;/Link&gt;\\n&lt;Link to=&quot;/form&quot;&gt;form&lt;/Link&gt;\\n\\n&lt;Route exact path=&quot;/&quot; component={Home} /&gt;\\n&lt;Route path=&quot;/form&quot; component={Form} /&gt;</code></pre><pre><code>//而在子组件中\\n&lt;Link to={`${this.props.match.path}/model`}&gt;model&lt;/Link&gt;\\n\\n&lt;Route path={`${this.props.match.path}/model`} component={Model} /&gt;</code></pre><h5 id=\\\"2、路由传参\\\">2)、路由传参:</h5>\\n<pre><code>//通过params:  \\n&lt;Route path=&#39;/form/:id&#39;   component={Form}&gt;&lt;/Route&gt;\\n\\nhtml方式      &lt;Link to=&quot;/form/2&quot;&gt;form&lt;/Link&gt;    　　　　\\njs方式        this.props.history.push(&#39;/form/2&#39;)\\n\\n获取          this.props.match.params.id</code></pre><pre><code>//通过query\\n&lt;Route path=&quot;/form&quot; component={Form} /&gt;  \\n\\nhtml方式    &lt;Link to=&quot;/form?day=Friday&quot;&gt;form&lt;/Link&gt;\\n            &lt;Link to={{pathname:&quot;/form&quot;,search:&quot;?day=Friday&quot;}}&gt;form&lt;/Link&gt;\\n\\nJS方式      this.props.history.push({pathname:&quot;/form&quot;,search:&quot;?day=Friday&quot;});\\n\\n获取方式1   this.props.location.search     //  ?day=Friday (只能获取到字符串) \\n获取方式2   new URLSearchParams(&quot;?day=Friday&quot;).get(&quot;day&quot;)     // &quot;Friday&quot;\\n            //在现代浏览器中，可以通过URLSearchParams将&quot;?day=friday&quot;解析,然后用get获得</code></pre><h3 id=\\\"五、react中常见问题\\\">五、react中常见问题</h3>\\n<h5 id=\\\"1、npm-run-eject报错\\\">1)、npm run eject报错</h5>\\n<pre><code>This git repository has untracked files or uncommitted changes:</code></pre><pre><code>cd my-react-app\\ngit init\\ngit add .\\ngit commit -m &#39;add_upload_picture&#39;  //报错的话，修改描述\\nnpm run eject</code></pre><p>出现如下的界面表示成功提交</p>\\n<pre><code>Auto packing the repository in background for optimum performance.\\nSee &quot;git help gc&quot; for manual housekeeping.\\nCounting objects: 23004, done.\\nDelta compression using up to 4 threads.\\nCompressing objects:  22% (4782/21732)</code></pre><h5 id=\\\"2、覆盖ui库的样式\\\">2)、覆盖ui库的样式</h5>\\n<p>有时覆盖ui库的div会直接在body下，所以在组件里面是无法操作样式的，所以必须定义一个全局的样式,</p>\\n<p>有两种方式:</p>\\n<ul>\\n<li>在顶层的App.css中定义全局样式</li>\\n<li>在本组件中使用styled-components中的createGlobalStyle定义全局的样式</li>\\n</ul>\\n<pre><code>方式1\\n//Login.js\\n&lt;DatePicker dropdownClassName=&quot;hidden-year&quot; format=&quot;MM/DD&quot; /&gt;\\n\\n//App.css\\n/* hidden-year来限制只对 有hidden-year地方的组件有效，不然就修改了所有全局的日历样式 */\\n.hidden-year .ant-calendar-year-select{\\n  display: none!important;\\n}</code></pre><pre><code>方法2\\n//login级别下的style.js\\nimport styled, { createGlobalStyle } from &quot;styled-components&quot;;\\nexport const Globalstyle = createGlobalStyle`　\\n.hidden-year .ant-calendar-year-select{\\n    display: none!important;\\n  }\\n`;\\n\\n\\n//Login.js\\nimport { Globalstyle } from &quot;./style&quot;;\\n\\n//render方法， 必须引入Globalstyle。注意Globalstyle不接受任何的children，让在react tree的开头就可以了\\n&lt;Globalstyle /&gt;\\n&lt;DatePicker dropdownClassName=&quot;hidden-year&quot; format=&quot;MM/DD&quot;/&gt;</code></pre><h5 id=\\\"3、在react中使用sass\\\">3)、在react中使用sass</h5>\\n<p>因为react中默认已经支持了sass(通过eject后的文件可以看出。)</p>\\n<pre><code>  {\\n    test: sassRegex,\\n    exclude: sassModuleRegex,\\n    use: getStyleLoaders({ importLoaders: 2 }, &#39;sass-loader&#39;),\\n  },</code></pre><p>但是在引入.scss的文件时，报错。所以需要安装node-sass</p>\\n<pre><code>yarn add node-sass</code></pre><p>如果让npm rebuild node-sass，直接删除node_modules。然后重新安装 &gt;yarn</p>\\n<h5 id=\\\"4、不在组件中，而在其他地方如axios拦截器中使用router进行页面跳转\\\">4)、不在组件中，而在其他地方(如axios拦截器中)使用router进行页面跳转</h5>\\n<p>在顶级组件中将this.props.history赋值给window的一个变量</p>\\n<pre><code>componentDidMount(){\\n    window.myhistory = this.props.history\\n}</code></pre><p>在axios拦截器中使用window的变量</p>\\n<pre><code>window.myhistory.push(&#39;/form&#39;, { day: &#39;Friday&#39; })</code></pre><h5 id=\\\"5、不在组件中，而在其他地方如axios拦截器中更新store中的state\\\">5)、不在组件中，而在其他地方(如axios拦截器中)更新store中的state</h5>\\n<p>在对应的文件中</p>\\n<pre><code>import configureStore from &quot;@/store&quot;;\\n\\n\\n//在对应的位置\\nlet {store}  = configureStore;  //configureStore中包含store和persist。如果没有persist，不用解构，直接赋值\\nstore.dispatch(action);</code></pre><h5 id=\\\"5、在redux的reducer中，如何更新其他模块的state\\\">5)、在redux的reducer中，如何更新其他模块的state</h5>\\n<p>由于redux中在执行dispath时，是遍历所有加载的reducer，所以只需要在dispatch的后面，执行另一个模块的action即可</p>\\n<pre><code>dispath({type:&#39;LOGIN&#39;, payload:10});\\ndispath({type:&#39;HOME&#39;, payload:20});</code></pre><p>在react中如何使用css modules？\\n创建的css名称  如下\\nlogin.module.css</p>\\n<pre><code>.selfLink {\\n  height: 50px;\\n  border: 1px solid red;\\n  color: yellow;\\n}\\n\\n.SelfButton {\\n  height: 150px;\\n  width: 150px;\\n  color: red;\\n  background-image: url(&quot;@/assets/images/2131.png&quot;);\\n  background-size: 150px 150px;\\n}\\n</code></pre><p>在react组件中</p>\\n<pre><code>import loginCss from &quot;./login.module.css&quot;;\\n\\n\\n//render中\\n&lt;div className={loginCss.SelfButton}&gt;libingbing&lt;/div&gt;</code></pre><h5 id=\\\"6、动态加载静态资源时，路径不能为变量\\\">6)、动态加载静态资源时，路径不能为变量</h5>\\n<pre><code>let url = &quot;@/assets/images/carousel/logo.svg&quot;\\nrequire(url)    //报错\\n\\nlet url = &quot;logo.svg&quot;\\nrequire(&quot;@/assets/images/carousel/&quot;+url); //正确</code></pre><p>这是因为webpack在编写完，保存时，需要进行工程的打包，然后打包正确，才能热加载运行并刷新页面，打包静态资源时，如果require中传入的是个变量。那么在打包时，它有可能是计算机系统中的任何目录下的任何文件。所以至少需要给出在哪个路径下，这样才能精确的将那个路径下的对应文件打包，然后在代码运行时，直接用对应文件名生成正则匹配(因为打包后的文件，可能有hash值。不能直接查文件名)，找到后，加载到代码中。</p>\\n<p>所以 ==应该是尽可能静态化表达包所处的路径，最小化变量控制的区域。==</p>\\n<pre><code>let url = &quot;logo.svg&quot;\\nrequire(&quot;@/assets/images/carousel/&quot;+url); //好\\n\\nlet url = &quot;carousel/logo.svg&quot;\\nrequire(&quot;@/assets/images/&quot;+url); //不好</code></pre>\";","var map = {\n\t\"./1.jpg\": 143,\n\t\"./2.jpg\": 144,\n\t\"./b03.jpg\": 145,\n\t\"./config\": 53,\n\t\"./config.json\": 53\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 142;","module.exports = __webpack_public_path__ + \"static/media/1.91c28637.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.b8eb2da4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/b03.4d108e0f.jpg\";","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport \"@/assets/css/markdown.scss\";\r\n\r\nclass MarkDown extends Component {\r\n  constructor(props, context) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Markdown className=\"markdown-body\" options={{ forceBlock: true }}>\r\n          {this.props.source}\r\n        </Markdown>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {}\r\n}\r\n\r\n//为属性指定类型检查\r\nMarkDown.propTypes = {\r\n  source: PropTypes.string\r\n};\r\nMarkDown.defaultProps = {\r\n  source: \"暂无内容\"\r\n};\r\n\r\nexport default MarkDown;\r\n","import React, { Component } from \"react\";\r\nimport { Layout, Menu, Carousel, Icon } from \"antd\";\r\n\r\nimport MarkDown from \"@/components/markdown/MarkDown\";\r\nimport scssMarkDown from \"@/assets/markdown/scss.md\";\r\n\r\nclass CssScss extends Component {\r\n  constructor(props, context) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return <MarkDown source={scssMarkDown} />;\r\n  }\r\n\r\n  componentDidMount() {}\r\n}\r\n\r\nexport default CssScss;\r\n","import React, { Component } from \"react\";\r\nimport { Layout, Menu, Carousel, Icon } from \"antd\";\r\n\r\nimport MarkDown from \"@/components/markdown/MarkDown\";\r\nimport flexMarkDown from \"@/assets/markdown/flex.md\";\r\n\r\nclass CssFlex extends Component {\r\n  constructor(props, context) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return <MarkDown source={flexMarkDown} />;\r\n  }\r\n\r\n  componentDidMount() {}\r\n}\r\n\r\nexport default CssFlex;\r\n","import React, { Component } from \"react\";\r\nimport { Layout, Menu, Carousel, Icon } from \"antd\";\r\n\r\nimport MarkDown from \"@/components/markdown/MarkDown\";\r\nimport layoutMarkDown from \"@/assets/markdown/css-layout.md\";\r\n\r\nclass CssScss extends Component {\r\n  constructor(props, context) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return <MarkDown source={layoutMarkDown} />;\r\n  }\r\n\r\n  componentDidMount() {}\r\n}\r\n\r\nexport default CssScss;\r\n","import React, { Component } from \"react\";\r\nimport { Layout, Menu, Carousel, Icon } from \"antd\";\r\n\r\nimport MarkDown from \"@/components/markdown/MarkDown\";\r\nimport bemMarkDown from \"@/assets/markdown/cssBem.md\";\r\n\r\nclass CssBem extends Component {\r\n  constructor(props, context) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return <MarkDown source={bemMarkDown} />;\r\n  }\r\n\r\n  componentDidMount() {}\r\n}\r\n\r\nexport default CssBem;\r\n","import React, { Component } from \"react\";\r\nimport { Layout, Menu, Carousel, Icon } from \"antd\";\r\n\r\nimport MarkDown from \"@/components/markdown/MarkDown\";\r\nimport cssBaseMarkDown from \"@/assets/markdown/cssBase.md\";\r\n\r\nclass CssBase extends Component {\r\n  constructor(props, context) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return <MarkDown source={cssBaseMarkDown} />;\r\n  }\r\n\r\n  componentDidMount() {}\r\n}\r\n\r\nexport default CssBase;\r\n","import React, { Component } from \"react\";\r\nimport { Layout, Menu, Carousel, Icon } from \"antd\";\r\n\r\nimport MarkDown from \"@/components/markdown/MarkDown\";\r\nimport jsEs6AyncMarkDown from \"@/assets/markdown/js-es6-aync.md\";\r\n\r\nclass JsEs6Async extends Component {\r\n  constructor(props, context) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return <MarkDown source={jsEs6AyncMarkDown} />;\r\n  }\r\n\r\n  componentDidMount() {}\r\n}\r\n\r\nexport default JsEs6Async;\r\n","import React, { Component } from \"react\";\r\n\r\nimport MarkDown from \"@/components/markdown/MarkDown\";\r\nimport jsIssueMarkDown from \"@/assets/markdown/js-issue.md\";\r\n\r\nclass JsIssue extends Component {\r\n  constructor(props, context) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return <MarkDown source={jsIssueMarkDown} />;\r\n  }\r\n\r\n  componentDidMount() {}\r\n}\r\n\r\nexport default JsIssue;\r\n","import React, { Component } from \"react\";\r\n\r\nimport MarkDown from \"@/components/markdown/MarkDown\";\r\nimport jsDeepCopyMarkDown from \"@/assets/markdown/js-deep-copy.md\";\r\n\r\nclass JsDeepCopy extends Component {\r\n  constructor(props, context) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return <MarkDown source={jsDeepCopyMarkDown} />;\r\n  }\r\n\r\n  componentDidMount() {}\r\n}\r\n\r\nexport default JsDeepCopy;\r\n","import React, { Component } from \"react\";\r\n\r\nimport MarkDown from \"@/components/markdown/MarkDown\";\r\nimport vueVuexMarkDown from \"@/assets/markdown/vue-vuex.md\";\r\n\r\nclass VueVuex extends Component {\r\n  constructor(props, context) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return <MarkDown source={vueVuexMarkDown} />;\r\n  }\r\n\r\n  componentDidMount() {}\r\n}\r\n\r\nexport default VueVuex;\r\n","import React, { Component } from \"react\";\r\n\r\nimport MarkDown from \"@/components/markdown/MarkDown\";\r\nimport mdSource from \"@/assets/markdown/react-simple-tutorial.md\";\r\n\r\nclass ReactSimpleTutorial extends Component {\r\n  constructor(props, context) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return <MarkDown source={mdSource} />;\r\n  }\r\n\r\n  componentDidMount() {}\r\n}\r\n\r\nexport default ReactSimpleTutorial;\r\n","import React, { Component } from \"react\";\r\nimport { Layout, Menu, Carousel } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Switch, Route, Link } from \"react-router-dom\";\r\n\r\nimport \"./home.scss\";\r\nimport CssScss from \"@/features/blog/CssScss\";\r\nimport CssFlex from \"@/features/blog/CssFlex\";\r\nimport CssLayout from \"@/features/blog/CssLayout\";\r\nimport CssBem from \"@/features/blog/CssBem\";\r\nimport CssBase from \"@/features/blog/CssBase\";\r\nimport JsEs6Async from \"@/features/blog/JsEs6Async\";\r\nimport JsIssue from \"@/features/blog/JsIssue\";\r\nimport JsDeepCopy from \"@/features/blog/JsDeepCopy\";\r\nimport VueVuex from \"@/features/blog/VueVuex\";\r\nimport ReactSimpleTutorial from \"@/features/blog/ReactSimpleTutorial\";\r\n\r\nimport carouselConfig from \"@/assets/images/carousel/config.json\";\r\n\r\nclass Home extends Component {\r\n  constructor(props, context) {\r\n    super(props);\r\n  }\r\n\r\n  getCarouselImages = () => {\r\n    return carouselConfig.list.map((item, index) => {\r\n      let image = require(`@/assets/images/carousel/${item}`);\r\n      return (\r\n        <div key={index}>\r\n          <img src={image} className=\"carousel-img\" />\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { SubMenu } = Menu;\r\n    const { Content, Sider } = Layout;\r\n\r\n    let images = this.getCarouselImages();\r\n\r\n    //通过阿里巴巴字体库生成图标\r\n    // const IconFont = Icon.createFromIconfontCN({\r\n    //   scriptUrl: '//at.alicdn.com/t/font_1048945_1n0hcui62yb.js', // 在 iconfont.cn 上生成\r\n    // });\r\n\r\n    return (\r\n      <div className=\"main-article\">\r\n        <div className=\"article-summary\">\r\n          <div className=\"carousel\">\r\n            <Carousel autoplay>{images}</Carousel>\r\n          </div>\r\n          <div className=\"information\">\r\n            <div>\r\n              <h2>我的名片</h2>\r\n            </div>\r\n            <div className=\"email\">\r\n              <span>职业：Web前端工程师</span>\r\n              <span>现居：陕西省-西安市</span>\r\n              <span>Email：lbbyx163@163.com</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Layout className=\"article-layout\">\r\n          <Sider width={250} style={{ background: \"#fff\" }}>\r\n            <Menu mode=\"inline\" defaultSelectedKeys={[\"1\"]} defaultOpenKeys={[\"sub1\"]} style={{ height: \"100%\" }}>\r\n              <SubMenu\r\n                key=\"css\"\r\n                title={\r\n                  <span>\r\n                    <i className=\"iconfont blog-css\" /> CSS\r\n                  </span>\r\n                }>\r\n                <Menu.Item key=\"css-scss\">\r\n                  <Link to={`${this.props.match.path}/css-scss`}>SCSS简易教程</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"css-flex\">\r\n                  <Link to={`${this.props.match.path}/css-flex`}>Flex布局</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"css-layout\">\r\n                  <Link to={`${this.props.match.path}/css-layout`}>CSS常见布局方案</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"css-bem\">\r\n                  <Link to={`${this.props.match.path}/css-bem`}>CSS命名规范—BEM思想</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"css-base\">\r\n                  <Link to={`${this.props.match.path}/css-base`}>CSS基础知识</Link>\r\n                </Menu.Item>\r\n              </SubMenu>\r\n              <SubMenu\r\n                key=\"html\"\r\n                title={\r\n                  <span>\r\n                    <i className=\"iconfont blog-html\" /> HTML\r\n                  </span>\r\n                }>\r\n                <Menu.Item key=\"html-5\">待定义</Menu.Item>\r\n              </SubMenu>\r\n              <SubMenu\r\n                key=\"javascript\"\r\n                title={\r\n                  <span>\r\n                    <i className=\"iconfont blog-js\" /> JAVASCRIPT\r\n                  </span>\r\n                }>\r\n                <Menu.Item key=\"js-es6-async\">\r\n                  <Link to={`${this.props.match.path}/js-es6-async`}>ES6之async-await</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"js-issue\">\r\n                  <Link to={`${this.props.match.path}/js-issue`}>JS学习笔记之常见问题</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"js-deepcopy\">\r\n                  <Link to={`${this.props.match.path}/js-deepcopy`}>深拷贝与浅拷贝</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"js-option12\">待定义</Menu.Item>\r\n              </SubMenu>\r\n              <SubMenu\r\n                key=\"vue\"\r\n                title={\r\n                  <span>\r\n                    <i className=\"iconfont blog-vue\" /> VUE\r\n                  </span>\r\n                }>\r\n                <Menu.Item key=\"vue-vuex\"><Link to={`${this.props.match.path}/vue-vuex`}>vuex最完整的模块定义</Link></Menu.Item>\r\n              </SubMenu>\r\n              <SubMenu\r\n                key=\"react\"\r\n                title={\r\n                  <span>\r\n                    <i className=\"iconfont blog-react\" /> REACT\r\n                  </span>\r\n                }>\r\n                <Menu.Item key=\"react-simple-tutorial\"><Link to={`${this.props.match.path}/react-simple-tutorial`}>react简易教程</Link></Menu.Item>\r\n              </SubMenu>\r\n            </Menu>\r\n          </Sider>\r\n          <Content className=\"article-content\">\r\n            <RouteView route={this.props.match.path} />\r\n          </Content>\r\n        </Layout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nlet RouteView = props => {\r\n  if (!props.route) {\r\n    return null;\r\n  }\r\n  return (\r\n    <Switch>\r\n      <Route path={`${props.route}/css-scss`} component={CssScss} />\r\n      <Route path={`${props.route}/css-flex`} component={CssFlex} />\r\n      <Route path={`${props.route}/css-layout`} component={CssLayout} />\r\n      <Route path={`${props.route}/css-bem`} component={CssBem} />\r\n      <Route path={`${props.route}/css-base`} component={CssBase} />\r\n      <Route path={`${props.route}/js-es6-async`} component={JsEs6Async} />\r\n      <Route path={`${props.route}/js-issue`} component={JsIssue} />\r\n      <Route path={`${props.route}/js-deepcopy`} component={JsDeepCopy} />\r\n      <Route path={`${props.route}/vue-vuex`} component={VueVuex} />\r\n      <Route path={`${props.route}/react-simple-tutorial`} component={ReactSimpleTutorial} />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\nimport { Layout, Menu, Affix, BackTop } from \"antd\";\n\nimport { Switch, Route, Link, Redirect, withRouter } from \"react-router-dom\";\n\nimport \"@/assets/css/app.scss\";\nimport Home from \"@/features/home/Home\";\n\nclass App extends Component {\n  constructor(props, context) {\n    super(props);\n\n    this.state = {\n      loggedIn: true\n    };\n  }\n  render() {\n    const { Header, Content, Footer } = Layout;\n\n    return (\n      <Layout>\n        <BackTop />\n\n        <Affix offsetTop={0}>\n          <Header className=\"app-header\">\n            <div className=\"logo\" />\n            <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[\"article\"]} style={{ lineHeight: \"64px\" }}>\n              <Menu.Item key=\"article\">\n                <Link to={`/article`}>文章</Link>\n              </Menu.Item>\n              <Menu.Item key=\"mind-map\">\n                <Link to={`/mind-map`}>脑图</Link>\n              </Menu.Item>\n            </Menu>\n          </Header>\n        </Affix>\n\n        <Content className=\"app-main\">\n          <RouteView loggedIn={this.state.loggedIn} />\n        </Content>\n        <Footer className=\"app-footer\">My blog ©2018 Created by libb</Footer>\n      </Layout>\n    );\n  }\n}\n\nlet RouteView = props => {\n  return (\n    <Switch>\n      <Route exact path=\"/\" render={() => (props.loggedIn ? <Redirect to=\"/article\" /> : <Redirect to=\"/login\" />)} />\n      <Route path=\"/article\" component={Home} />\n      <Route path=\"/mind-map\" component={Home} />\n    </Switch>\n  );\n};\n\nexport default withRouter(App);\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n\n      console.log(\"registration======\",registration);\n      \n      //libb add\n      if(registration.installing) {\n        console.log('Service worker installing');\n      } else if(registration.waiting) {\n        console.log('Service worker installed');\n      } else if(registration.active) {\n        console.log('Service worker active');\n      }\n      //libb end\n\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"@/assets/css/index.scss\";\nimport \"moment/locale/zh-cn\"; //解决antd中日历上的月份为11月，而不是Nov\n\nimport App from \"@/App\";\nimport * as serviceWorker from \"@/serviceWorker\";\n\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\n\n// import { Provider } from \"react-redux\";\n// import store from \"@/store\";\nReactDOM.render(\n  // <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>,\n  // </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}